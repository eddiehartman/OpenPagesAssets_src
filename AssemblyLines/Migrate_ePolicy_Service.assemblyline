<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="2219" UUID="56eae6cc-1562-44cf-baea-b5ffa6b1e330" created="Wed May 27 16:17:07 IST 2020" createdBy="DishaSingh" main="Migrate_ePolicy_Service" modified="Tue Feb 16 17:40:55 CET 2021" modifiedBy="edbir" project="POC_MVP" version="7.1.1">
    <Container name="References"/>
    











































































































<AssemblyLine name="Migrate_ePolicy_Service">
        <ModTime>1613493655144</ModTime>
        <Settings>
            <parameter name="ALPoolSettingsDialog">false</parameter>
            <parameter name="automapattributes">false</parameter>
            <parameter name="createTombstones">false</parameter>
            <parameter name="includeGlobalPrologs">true</parameter>
            <parameter name="includePrologs"><![CDATA[ClauseControlObj
ExcelObj
MailObj
Mapper
OpenPagesObj
RequestObj
SCP
Script_Lib
Timer
WordDoc
ePolicyObj]]></parameter>
            <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
        </Settings>
        <Hooks>
            <Hook name="onfailure">
                <InheritFrom>[no inheritance]</InheritFrom>
                <Name>onfailure</Name>
                <Script><![CDATA[msg = "Service Error .- " + error.message + " - " + error.exception;
log("ERROR", msg);
response("500", 
		"Service Error", 
		msg, 
		toJson({
			status: "Failed",
			message: msg
		}),
		work);]]></Script>
                <Enabled>true</Enabled>
            </Hook>
            <Hook name="prolog0">
                <InheritFrom>[no inheritance]</InheritFrom>
                <Name>prolog0</Name>
                <Script><![CDATA[//vrs = "20201119 1236"; // Made simple to reply fast
//vrs = "20201211 1113"; // added vrs to isAlive message
//vrs = "20201211 1757"; // Fixed Clause Control Updates
//vrs = "20201211 1757"; // Disabled Clause Control Updates
//vrs = "20201212 1241"; // Re-enabled Clause Control Updates, disabled mapping from ePolicy values
//vrs = "20201213 1053"; // Fixed handling of initial errors (like Account Not Found)
//vrs = "20201214 1433"; // Enhanced service error handling
//vrs = "20201214 2023"; // Fixed local variables in some for-loops in DeviationMap
//vrs = "20201215 1343"; // Gave Main its own daily log file
//vrs = "20201215 2100"; // Fixed check for running ALs
//vrs = "20201216 1314"; // Sharing log between Service and Main and removed toJSON() logging
//vrs = "20201216 1438"; // Sending out one less In Progress email, simplified Service log, added new Policy Name to AL
//vrs = "20201216 1525"; // Fixed a null behavior getting CSD.getString("FORMAT")
//vrs = "20201216 1621"; // Fixed null for newPolicy.getString("Name")
//vrs = "20201216 2032"; // Corrected changes to CCs and the Migration Log
//vrs = "20201216 2148"; // Even more of Blades items fixed
//vrs = "20201217 1406"; // Fixed a bug where epValue was being set from opObj
//vrs = "20201217 1523"; // Affixed the New Rule for CC mapping EVERYWHERE now
//vrs = "20201217 1535"; // added mail.extra.target property
//vrs = "20201217 1612"; // Removed erraneous trim() of values to update Clause Controls with
//vrs = "20201217 1650"; // Corrected Migration Log by replacing all whitespace and lowercasing before checking differences
//vrs = "20201217 1659"; // Preventing In Progress mail from being sent immediately
//vrs = "20201217 1726"; // Fixed replaceAll which needed backslash escaped
//vrs = "20201217 1734"; // NOW the In Progress mail is not sent out immediately
//vrs = "20201217 2034"; // Correctly comparing columns for Migration Log by removing newlines
//vrs = "20201221 1216"; // Checking that CSD is passed in correctly to Thread
//vrs = "20201222 1114"; // Changed New Policy Name in AL name for Validation to *VALIDATING*
//vrs = "20201223 0929"; // Fixed CSD.getString() error
//vrs = "20201223 1414"; // Working to fix regular email notifications
//vrs = "20210106 1152"; // Fixing problem with writing invalid/unreadable SOXDocument
//vrs = "20210106 1536"; // Fixed code error in define service functions
//vrs = "20210106 1536"; // Fixed code error in define service functions
//vrs = "20210107 1843"; // Fixed code error in define service functions
//vrs = "20210108 2328"; // Tied Risk Export Schedule to the schedule property in POC_MVP.properties
//vrs = "20210111 1958"; // Corrected handling of SOXDocuments
//vrs = "20210112 2034"; // Re-enabled logging (WARN) when unable to determine version of a CSD
//vrs = "20210113 1512"; // Fixed issue with csdPrefix
//vrs = "20210117 1012"; // Improved discovery of CSD version in attached doc
//vrs = "20210119 2044"; // Changed from address for emails to blade@us.ibm.com
//vrs = "20210119 2128"; // Beefed up ability call service from curl locally
//vrs = "20210121 2117"; // Disabled Draft filter for CC update and added ePolicy CSD id to Change Summary
//vrs = "20210122 1459"; // Logging next notification time as INFO instead of DEBUG, with @DEBUG@ preceding the message
vrs = "20210122 1512"; // Reloading properties for each request

alName = task.getShortName();
task.setParam("alName", alName);

// Needed for service function response()
responseMade = false; 
// variables used by log() to collect errors and warnings
_errors = [];
_warnings = [];


log ("Migrate_ePolicy_Server v" + vrs);]]></Script>
                <Enabled>true</Enabled>
            </Hook>
        </Hooks>
        <CheckpointConfig/>
        <SandboxConfig/>
        <SimulationConfig>
            <SimulationStates>
                <Component name="ePolicy2OP_define service functions" state="Enabled"/>
                <Component name="If GET then return status" state="Enabled"/>
                <Component name="Get request details" state="Enabled"/>
                <Component name="Start Main AL" state="Enabled"/>
                <Component name="Respond back to UI" state="Enabled"/>
                <Component name="HTTPServerConnector" state="Enabled"/>
            </SimulationStates>
            <ProxySettings/>
        </SimulationConfig>
        <LogConfig>
            <Logger name="DailyRollingFileAppender">
                <InheritFrom>system:/Loggers/ibmdi.DailyRollingFileAppender</InheritFrom>
                <parameter name="DailyRollingFile.Append">false</parameter>
                <parameter name="DailyRollingFile.DatePattern">'.'d</parameter>
                <parameter name="DailyRollingFile.File">logs/Migrate_ePolicy_Service.log</parameter>
                <parameter name="Pattern.ConversionPattern">%d{ISO8601} - %m%n</parameter>
                <parameter name="com.ibm.di.log.layout">Pattern</parameter>
                <parameter name="com.ibm.di.log.level">INFO</parameter>
                <parameter name="enabled">true</parameter>
            </Logger>
        </LogConfig>
        <ContainerEF name="EntryFeedContainer">
            <Connector name="HTTPServerConnector">
                <InheritFrom>system:/Connectors/ibmdi.HTTPServer</InheritFrom>
                <ModTime>1605872656121</ModTime>
                <ConnectorMode>Server</ConnectorMode>
                <ConnectorState>Enabled</ConnectorState>
                <Configuration>
                    <InheritFrom>[parent]</InheritFrom>
                    <parameter name="tcpDataAsProperties">true</parameter>
                    <parameter name="tcpPort"><![CDATA[@SUBSTITUTE{javascript usePort = system.getTDIProperty("service.port") || 8042;
log("Using service port: " + usePort);
return usePort;}]]></parameter>
                    <parameter name="useSSL">false</parameter>
                </Configuration>
                <Parser>
                    <InheritFrom>[parent]</InheritFrom>
                </Parser>
                <AttributeMap name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                    <AttributeMapItem>
                        <Name>*</Name>
                        <Type>simple</Type>
                        <Simple>*</Simple>
                    </AttributeMapItem>
                </AttributeMap>
                <AttributeMap name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                    <AttributeMapItem>
                        <Name>*</Name>
                        <Type>simple</Type>
                        <Simple>*</Simple>
                    </AttributeMapItem>
                </AttributeMap>
                <DeltaSettings/>
                <Schema name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                </Schema>
                <Schema name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                </Schema>
                <LinkCriteria>
                    <InheritFrom>[parent]</InheritFrom>
                </LinkCriteria>
                <Hooks>
                    <InheritFrom>[parent]</InheritFrom>
                    <Hook name="before_reply">
                        <InheritFrom>[no inheritance]</InheritFrom>
                        <Name>before_reply</Name>
                        <Script>log("Making response to client:\n" + conn);</Script>
                        <Enabled>true</Enabled>
                    </Hook>
                </Hooks>
                <CheckpointConfig/>
                <SandboxConfig/>
                <Reconnect>
                    <InheritFrom>[parent]</InheritFrom>
                    <ReconnectRules/>
                </Reconnect>
                <Operations/>
                <PoolDefinition>
                    <InheritFrom>[parent]</InheritFrom>
                </PoolDefinition>
                <PoolInstance/>
            </Connector>
        </ContainerEF>
        <ContainerDF name="DataFlowContainer">
            <Script name="ePolicy2OP_define service functions">
                <InheritFrom>/Scripts/ePolicy2OP_define service functions</InheritFrom>
                <ModTime>1605786480225</ModTime>
            </Script>
            <Script name="If GET then return status">
                <ModTime>1607944499622</ModTime>
                <parameter name="script"><![CDATA[method = work.getString("http.method");

if (method != "POST") {
	response("200", 
			"Migrate ePolicy Service is running", 
			"", 
			'{"status": "Migrate ePolicy Service is running", "version": "' + vrs + '"} ', 
			work);
	getRequest = true;
	system.exitFlow();
}]]></parameter>
            </Script>
            <Script name="Get request details">
                <ModTime>1605872871335</ModTime>
                <parameter name="script"><![CDATA[requestID = null;
base = work.getString("http.base");
operation = base.substring(1).toLowerCase();
body = work.getString("http.bodyAsString");

try {
	bodyObj = fromJson(body);
} catch (ex) {
	log("ERROR", "Unable to parse request body - " + ex);
	return;
}

try {
	if (operation == "migrate") {
		requestID = bodyObj.requestid || bodyObj.requestId || bodyObj.requestID;
		requestObj = new RequestObj(requestID);

	} else {
		requestObj = new RequestObj(work);
		requestID = requestObj.requestID;
	}
} catch (ex) {
	log("ERROR", "Unable to handle request " + requestID + " - " + ex);
	return;
}	

log("Processing " + operationName(operation) + " Request " + requestID);
	

if (operation == "migrate" && requestID == null) {
	log("ERROR", "Payload for Migrate Request must contain requestID");
}]]></parameter>
            </Script>
            <Script name="Start Main AL">
                <ModTime>1608112660905</ModTime>
                <parameter name="script"><![CDATA[if (inError()) {
	return;
}

if (requestID) {
	work.requestID =  requestID;
}
work._Real_Request = true;
work.requestObj = requestObj;

log("Launching Migrate_ePolicy_Main...");

try {
	iwe = system.newEntry();
	iwe.merge(work);
	tcb = system.newTCB();
	tcb.setInitialWorkEntry(iwe);
	vect = new java.util.Vector();
	vect.add(tcb);
	vect.add(task.getLog());

	mainAL = main.startAL("Migrate_ePolicy_Main", vect); // Fire and forget this AL
} catch (ex) {
	log("ERROR", "Error starting Migrate_ePolicy_Main AL - " + ex);	
}]]></parameter>
            </Script>
            <Script name="Respond back to UI">
                <ModTime>1605872667670</ModTime>
                <parameter name="enabled">true</parameter>
                <parameter name="script"><![CDATA[work.removeAllAttributes();

if (inError()) {
	// responseError(code, msg, errorMsg, message, entry)
	msg = "Bad request - " + rootCause();
	log("ERROR", "Making error return: " + msg);
	response("400", 
			"Bad request", 
			msg, 
			toJson({
				status: "Failed",
				message: msg
			}),
			work);
	return;
}

msg = operationName(operation) + " Request " + requestID 
	+ " submitted. Email notification will be sent to your internet email address"
	+ " upon completion.";

log("Making successful return: " + msg);
response("200", 
		msg, 
		msg, 
		toJson({
			status: "Success",
			message: msg
		}), 
		work);]]></parameter>
            </Script>
        </ContainerDF>
        <ThreadOptions>
            <parameter name="assemblyline.ehc.executeProlog">false</parameter>
            <parameter name="assemblyline.ehc.maxInstance">10</parameter>
            <parameter name="assemblyline.ehc.minPrepare">5</parameter>
        </ThreadOptions>
        <Operations/>
        <InitParams>
            <Schema name="AssemblyLineInitParams"/>
        </InitParams>
    </AssemblyLine>
</MetamergeConfig>