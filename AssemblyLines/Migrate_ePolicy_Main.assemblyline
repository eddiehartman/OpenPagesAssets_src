<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="2576" UUID="56eae6cc-1562-44cf-baea-b5ffa6b1e330" created="Wed May 27 16:17:07 IST 2020" createdBy="DishaSingh" main="Migrate_ePolicy_Main" modified="Wed Dec 23 14:13:39 CET 2020" modifiedBy="eddie" project="POC_MVP" version="7.1.1">
    <Container name="References"/>
    






























































































































<AssemblyLine name="Migrate_ePolicy_Main">
        <ModTime>1608729219315</ModTime>
        <Settings>
            <parameter name="ALPoolSettingsDialog">false</parameter>
            <parameter name="automapattributes">false</parameter>
            <parameter name="createTombstones">false</parameter>
            <parameter name="includeGlobalPrologs">true</parameter>
            <parameter name="includePrologs"><![CDATA[ClauseControlObj
ExcelObj
MailObj
Mapper
OpenPagesObj
RequestObj
SCP
Script_Lib
Timer
WordDoc
ePolicyObj]]></parameter>
            <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
        </Settings>
        <Hooks>
            <Hook name="epilog2">
                <InheritFrom>[no inheritance]</InheritFrom>
                <Name>epilog2</Name>
                <Script><![CDATA[migrationEnd = new Date();

responseCode = work.getString("http.responseCode");
if (responseCode == "200" && inError()) {
	responseCode = "500"; // We need to capture these further down
}

makeResponse(work, requestID, operation, accounts, counters, errors, warnings, timers);

responseCode = work.getString("http.responseCode");
if (typeof requestObj != "undefined" && requestObj != null) {
	if (responseCode == "200") {
		requestObj.saveSuccess();
	} else {
		requestObj.saveFailure();
	}
}]]></Script>
                <Enabled>true</Enabled>
            </Hook>
            <Hook name="onfailure">
                <InheritFrom>[no inheritance]</InheritFrom>
                <Name>onfailure</Name>
                <Script><![CDATA[log("ERROR", error.message + " (" + error.exception.getClass() + ")");

// Make sure the client gets an answer
if (!responseMade) {
	msg = "Error occurred: " + error.message + " (" + error.exception + ")";
	work["http.responseCode"] = 500;
	work["http.responseMsg"] = "Internal Server Error";
	work["http.message"] = msg;
    work["http.Content-Type"] = "application/json";
    work["http.body"] = toJson({
    	status: "Failed",
    	accounts: [],
    	message: msg,
    	errors: [msg]
    })
}]]></Script>
                <Enabled>true</Enabled>
            </Hook>
            <Hook name="prolog0">
                <InheritFrom>[no inheritance]</InheritFrom>
                <Name>prolog0</Name>
                <Script><![CDATA[//vrs = "20200617 2112"; // Reading controls BEFORE mapping/adding Policy to OP
//vrs = "20200618 1909"; // Fixed problems we found prior-to cadence
//vrs = "20200703 1250"; // Now migrating Clauses (Procedures) and Control Clauses
//vrs = "20200705 18:30"; // Everything done except Technical Specifications
//vrs = "20200712 2140"; // Creating Excel sheets with multiple validation and history log entries
//vrs = "20200731 2335"; // Renaming Policy with version.sub-version appended to the name
//vrs = "20200802 1544"; // Corrected renaming functionality
//vrs = "20200804 1623"; // Fixed vlEntry - change to hlEntry for History Log migration
//vrs = "20200805 2243"; // Added timings and fixed TecSpec doc writing to make Name unique
//vrs = "20200806 1612"; // Fixed Policy name update with version and sub-version
//vrs = "20200810 1127"; // Removed renaming of Policy with vers/sub-vers
//vrs = "20200819 1352"; // Turned this into a Listener AL (HTTP Service)
//vrs = "20200826 1437"; // Added skippingClauseControls flag
//vrs = "20200829 2237"; // Fixed error handling and client response
//vrs = "20201019 1425"; // Added Rick Text notification email
//vrs = "20201026 1743"; // Initializing opUserEmail variable and fixed On Failure
//vrs = "20201029 1731"; // Added isAlive GET response (no path required)
//vrs = "20201106 1113"; // Do not crash if unable to find email properties
//vrs = "20201106 1138"; // Made service port a property
//vrs = "20201117 1241"; // Turned this into the Migrate_ePolicy_Main AL
//vrs = "20201214 1207"; // now sending email at start and at intervals during processing
//vrs = "20201217 1535"; // added mail.extra.target property
//vrs = "20201217 1659"; // Preventing In Progress mail from being sent immediately
vrs = "20201217 1734"; // NOW the In Progress mail is not sent out immediately


alName = task.getShortName();
task.setParam("alName", alName);

log ("Migrate_ePolicy_Server v" + vrs);

timer = new Timer();
timer.start("entire process")
timer.start("initialization");
java.lang.System.getProperties().put("_timer", timer);

migrationStart = new Date();

// variables used to collect errors and metrics 
errors = {};
warnings = {};
counters = {};

// other variables, including those set from the request details
timers = timer.timers();
operation = "Undefined";
doMigration = false;
opNoun = "Invalid";
opUserEmail = null;
requestID = null;

// global variables used by Script_Lib log() to collect errors and warnings
_errors = [];
_warnings = [];

// Prepare the response object to be returned to the client
responseObj = {
	code: "200",
	msg: "OK",
	status: "Success", // Optimistic :)""
	message: "",
	errorMsg: "",
//	message: "The operation completed successfully",
	accounts: [],
	errors: []
};

// Only make the response once
responseMade = false;

// Load max CSD ALs that can be launched
maxALs = system.getTDIProperty("max.concurrent.als") || 3;]]></Script>
                <Enabled>true</Enabled>
            </Hook>
        </Hooks>
        <CheckpointConfig/>
        <SandboxConfig/>
        <SimulationConfig>
            <SimulationStates>
                <Component name="Debug settings" state="Enabled"/>
                <Component name="Define service functions" state="Enabled"/>
                <Component name="Get request details" state="Enabled"/>
                <Component name="Log Request" state="Enabled"/>
                <Component name="Initialize Connectors" state="Enabled"/>
                <Component name="Send initial email" state="Enabled"/>
                <Component name="Launch threads" state="Enabled"/>
                <Component name="Wait for threads to complete" state="Enabled"/>
                <Component name="Gather metrics" state="Enabled"/>
                <Component name="End of processing" state="Enabled"/>
            </SimulationStates>
            <ProxySettings/>
        </SimulationConfig>
        <LogConfig>
            <Logger name="DailyRollingFileAppender">
                <InheritFrom>system:/Loggers/ibmdi.DailyRollingFileAppender</InheritFrom>
                <parameter name="DailyRollingFile.Append">false</parameter>
                <parameter name="DailyRollingFile.DatePattern">'.'d</parameter>
                <parameter name="DailyRollingFile.File">logs/Migrate_ePolicy_Main.log</parameter>
                <parameter name="Pattern.ConversionPattern">%d{ISO8601} - %m%n</parameter>
                <parameter name="com.ibm.di.log.layout">Pattern</parameter>
                <parameter name="com.ibm.di.log.level">INFO</parameter>
                <parameter name="enabled">true</parameter>
            </Logger>
        </LogConfig>
        <ContainerEF name="EntryFeedContainer"/>
        <ContainerDF name="DataFlowContainer">
            <ModTime>1608729219315</ModTime>
            <Script name="Debug settings">
                <ModTime>1608728711425</ModTime>
                <parameter name="script"><![CDATA[//requestID = "201130BMMOLA139H"; // for debugging Migrations
requestID = "harshithatest";
//requestID = "copa";

debug = false; // debug = true means write operations not performed
debugId = 45392; // Set debugId to the most recently created Policy for when debug == true
// The mockupEntry is for debugging this AL without having to call it from the Service
mockupEntry = system.newEntry();

mockupEntry["http.body"] = toJson({
	epolicy: {
/**/	
	    userName: "db2inst1",
	    password: "Epolicy2ibm@123",
	    hostname: "mopbzp174025.fr.dst.ibm.com",
	    port: "50000",
	    database: "POLICYL"
/**/
/*
	    userName: "cwpdb",
	    password: "DnqE4bCmGUFMwZHZ",
	    hostname: "146.89.38.141",
	    port: "60000",
	    database: "EPOLICY"
/**/	    
	  },
	accounts: [
//			"WHU"
//			"Copacabana"
//			"Ralph Lauren"
//			"Independent Electricity System Operator"
			"harshithatest"
//			"Sema"
//			"BNP Paribas"
	],
	mappingTable : {},
//	opUserEmail : ["eddiehartman@gmail.com","blade@us.ibm.com"]
	opUserEmail : ["eddiehartman@gmail.com"]
});

mockupEntry["http.bodyAsString"] = mockupEntry["http.body"];
mockupEntry["content-type"] = "application/json)";
mockupEntry["http.Authorization"] = "arf";
mockupEntry["http.method"] = "POST";
mockupEntry["http.base"] = "/validate";
if (typeof requestID != "undefined" && requestID != null) {
	mockupEntry.requestID = requestID;
	mockupEntry["http.base"] = "/migrate";
}


base = mockupEntry.getString("http.base");
if (base.contains("migrate")) {
	mockupEntry["http.qs.requestid"] = requestID;
	mockupEntry["http.bodyAsString"] = toJson({
		requestid: requestID
	});
	mockupEntry["http.body"] = mockupEntry["http.bodyAsString"];
}]]></parameter>
            </Script>
            <Script name="Define service functions">
                <InheritFrom>/Scripts/ePolicy2OP_define service functions</InheritFrom>
                <ModTime>1607976918449</ModTime>
            </Script>
            <Script name="Get request details">
                <ModTime>1606819318899</ModTime>
                <parameter name="script"><![CDATA[// Initialize accounts to null
accounts = null;

// Initialize thread info objects
errors = {};
warnings = {};
counters = {};

// Initialize the iwe Entry
iwe = system.newEntry();

// Initialize list of ALs launched
als = new java.util.ArrayList();


// Use the mockupEntry if this is a debugging session
if(work._Real_Request == null) {
	work.merge(mockupEntry);
}

operation = work.getString("http.base").toLowerCase();
if (operation.startsWith("/")) {
	operation = operation.substring(1);
}

requestObj = work.getObject("requestObj");

if (requestObj == null) {
	// Save the RequestObj from the Service, or if debugging locally create a new on with the mockupEntry
	try {
		if (operation == "validate") {
			requestObj = new RequestObj(work);
		} else {
			requestID = work.getString("requestID");
			requestObj = new RequestObj(requestID);
		}
	} catch (ex) {
		log("ERROR", "Error in requestObj: " + ex);
		work["http.responseCode"] = "400";
	}
}

exitOnErrors();

// get various settings from the requestObj
accounts = requestObj.accounts();
ePolicy = requestObj.ePolicy();
mappingTable = requestObj.mappingTable();
opUserEmail = requestObj.opUserEmail() || null;
requestID = requestObj.requestID;

// Make sure there is at least one account
if (accounts.length == 0) {
	log("ERROR", "No accounts passed in requestObj!");
	system.exitFlow();
}

alName = requestID + "/" + task.getShortName();
task.setParam("alName", alName);

debug = requestObj.debug() || debug;
//skippingClauseControls = requestObj.skippingClauseControls() || skippingClauseControls;

log("Performing operation: " + operation);

// Set the migrate variable
migrate = "migrate".equalsIgnoreCase(operation);
opNoun = (operation == "migrate") ? "Migration" : "Validation";

log("\n---\n\nPerforming " + opNoun + "\n\n---");

// Empty out the work Entry
work.removeAllAttributes();

// Get the URL to the Migration UI
migrateURL = system.getTDIProperty("migrate.ui.url");
if (migrateURL == null && operation == "validate") {
	log("ERROR", "The migration UI URL is not set in property: migrate.ui.url");
	system.exitFlow();
}

// Now we have to prepend this URL Path with the base URL for the OpenPages server
// TODO EAH]]></parameter>
            </Script>
            <Script name="Log Request">
                <ModTime>1605809443440</ModTime>
                <parameter name="script"><![CDATA[// Dump the work entry
log("****\n*****\n***** Request received:\n" + requestObj.stringify());]]></parameter>
            </Script>
            <Script name="Initialize Connectors">
                <ModTime>1605863039931</ModTime>
                <parameter name="script"><![CDATA[exitOnErrors();

try{
	db = new ePolicyObj({
		hostName: ePolicy.hostName || ePolicy.hostname,
		userName: ePolicy.userName || ePolicy.username, 
		password: ePolicy.password, 
		port: ePolicy.port, 
		database: ePolicy.database	
	});
}catch(ex){
	responseError("400", "Bad Request", "Error connecting to ePolicy: " + ex);
}

if (debug) {
	log("\n\n\n\n\n	****** NOTE: Debug is TRUE ******   \n\n,");
	system.sleep(2);
}

exitOnErrors();

try{
	op = new OpenPagesObj();
}catch(ex){
	responseError("500", "Internal Server Error", "Error connecting to Openpages: " + ex);
}

exitOnErrors();

// Setup Clause Control object
try{
	cc = new ClauseControlObj({
		openPagesObj: op,
		debug: debug,
		validate: !migrate
	});
}catch(ex){
	responseError("500", "Internal Server Error", "Error reading Policy Template from Openpages: " + ex);
}

exitOnErrors();]]></parameter>
            </Script>
            <Script name="Send initial email">
                <ModTime>1608060109677</ModTime>
                <parameter name="script"><![CDATA[alErrors = {};
alWarnings = {};
alCounters = {};
alTimers = {};

useEntry = system.newEntry();
useEntry.merge(work);
log("Sending initial mail to " + opUserEmail + "...");
sendEmail(opUserEmail, requestID, useEntry, operation, accounts, alCounters, alErrors, alWarnings, alTimers, "Initiated");]]></parameter>
            </Script>
            <Script name="Launch threads">
                <ModTime>1608729219315</ModTime>
                <parameter name="script"><![CDATA[// Prepare for sending notification emails
statusInterval = system.getTDIProperty("smtp.status.mail.interval") || 60; // minutes
nextStatus = java.lang.System.currentTimeMillis() + (statusInterval * 60 * 1000);
log("DEBUG", "Next email dispatched at " + system.formatDate(new java.util.Date(nextStatus), "HH:mm:ss.SSS"));

// For each Account passed to this AL...
for (i in accounts) {
	accountName = accounts[i];
	doMigration = migrate;
	
	// Save attachements to OpenPages Policy to also associate with the TechSpec
	
	log("Handing account " + accountName + "   migrating: " + doMigration);

	try{
		// First find the account in iPolicy - fail if not found
		log("Looking for account (" + accountName + ") in ePolicy...");
		res = db.find("EPOLICY.ACCOUNT", "NAME", accountName);
		
		if (res.length == 0) {
			var errmsg = "Unable to find Account in ePolicy db: " + accountName;
			log("ERROR",errmsg);
			errors[accountName] = errmsg;
			resetErrors(); // just accumulate this error for the account
			continue;
		}
		
		ePolicyAccount = res[0];
		log("Found account: " + accountName + " - ID: " + ePolicyAccount.ID
			+ '\n' + ePolicyAccount.toJSON());
			
		// Prepare attributes for later mapping
		ePolicyAccount.ePolicy_Account_Name = ePolicyAccount.Name;
		ePolicyAccount.ePolicy_Account_ShortName = ePolicyAccount.ShortName;
		ePolicyAccount.Country_FullName = ePolicyAccount.LOCATION_FULL_NAME;
		
		// Now find the account in OpenPages - fail if not found
		log("Looking for account in OpenPages...");
		
		// This handy function first searches by Name and then by Alias
		res = op.findAccount(accountName, { objectType: "SOXAccount" });
		
		if (res.length == 0) {
			var errmsg = "Unable to find Account in OpenPages: " + accountName;
			log("ERROR",errmsg);
			errors[accountName] = errmsg;
			resetErrors(); // just accumulate this error for the account
			continue;
		}
		
		opAccount = res[0];
		opAccountID = opAccount.getString("Resource ID");
		log("Found account: " + accountName + " - ID: " + opAccount["Resource ID"]
			+ '\n' + opAccount.toJSON());
		
		// Add attributes for later mapping
		opAccount.Account_Name = opAccount.Name;
		accountNameWithCode = accountName + " (" + opAccount.getString("Name") + ")";
		
		// Now read CSDs from ePolicy
		existingPolicyList = op.findChildren("SOXAccount",
			opAccount.getString("Resource ID"),
			"Policy");
		// Get count of existing epolicy for this accout
		tempcount = 0;
		for (existingPolicy in existingPolicyList) {
			count = existingPolicy.getString("name").split("-")[1];
			if (count > tempcount) {
				tempcount = count;
			}
		}
		
		timer.stop("initialization");
		
		log("Reading CSDs...");
		csdIndex = tempcount;
		
		csdsFound = {};
		
		CSDList = db.query("policy", ePolicyAccount);
		for (CSDEntry in CSDList) {
			// Launch Migrate_ePolicy AL with the accounts and CSD details (entries)
			// Also pass in the ControlClauseObj, already initialized, along
			// with other required variables.
			//
			// Note that each thread must set up its own OpenPages and ePolicy connections
			
			nextStatus = sendNotificationEmail({
				nextStatus: nextStatus,
				opUserEmail: opUserEmail,
				requestID: requestID,
				workEntry: work,
				operation: operation,
				accounts: accounts
			});

			CSD = system.newEntry();
			CSD.merge(CSDEntry);
			
			CSD.csd_filename = CSD.NAME
							+ "__CSD_"
							+ ePolicyAccount.ePolicy_Account_ShortName
							+ "_"
							+ formatDate(CSD.getObject("UPDATED_TS"));
			CSD.csd_fileext = (CSD.getString("FORMAT") || "").toLowerCase().trim();
			CSD.csd_template_version = CSD.getString("Template_Version");
			CSD.csd_id = CSD.getString("id");
			
			// Store arguments to pass to the Thread AL
			args = {
				requestID: requestID,
				
			    accountName: accountName,
			    cc: cc,
			    csd: CSD,
			    ePolicy: ePolicy,
			    
			    opAccount: opAccount,
			    opAccountID: opAccountID,
			    ePolicyAccount: ePolicyAccount,
			    accountNameWithCode: accountNameWithCode,
			    mappingTable: mappingTable,

			    operation: operation,
			    
			    //skippingClauseControls: skippingClauseControls,
			    debug: debug,
			    debugId: debugId
			}
			iwe._args = args;
		
			alName = requestID + "/" 
					+ accountName 
					+ "/" + CSD.name 
					+ "(" + CSD.id + ")"
					+ "-" + CSD.status;
		
			if (csdsFound[alName]) {
				log("WARN", "Already processing CSD: " + CSD.toJSON());
				continue;
			}
			csdsFound[alName] = true;
		
			tcb = system.newTCB()
			tcb.setTaskName(alName);
			tcb.setInitialWorkEntry(iwe);
		
			vect = new java.util.Vector();
			vect.add(tcb);
			vect.add(task.getLog());
			
			while (runningALs(als) > maxALs) {
				task.sleep(3000);

				nextStatus = sendNotificationEmail({
					nextStatus: nextStatus,
					opUserEmail: opUserEmail,
					requestID: requestID,
					workEntry: work,
					operation: operation,
					accounts: accounts
				});
			}
			
			log("Launching Migrate_ePolicy for " + alName);
			als.add({
				al: main.startAL("Migrate_ePolicy_Thread", vect),
				name: alName,
				step: 0,
				time: (new Date()).getTime()
			});
/*			
			log("\n---------\n\n\n       *** ONLY DOING ONE CSD ***\n\n\n----------");
			break;
*/			
		} // for each CSD	
	}catch(ex){
		var errmsg = "Error migrating account: " + accountName;
		if (typeof CSD == "object" && CSD != null) {
			errmsg += " CSD: " + CSD.id + " " + CSD.name;
		}
		errmsg += " - " + ex;
				
		log("ERROR", errmsg);
		
		// Add this error to total for the current processed Account
		errors[accountName] = errors[accountName] || [];
		errors[accountName].push(errmsg);
	}

} // for each Account]]></parameter>
            </Script>
            <Script name="Wait for threads to complete">
                <ModTime>1608728679128</ModTime>
                <parameter name="script"><![CDATA[try {
	// Now wait for ALs to complete
	cnt = -1;
	displayModulo = 20;
	do {
		cnt++;
		runningCount = 0;
		if (cnt % displayModulo == 0) {
			log("Checking state of threads:")
		}
		for (alObj in als) {
			alName = alObj.name;
			al = alObj.al;
			state = al.getCurrentState();
			step = al.getCurrentStep();
			
			if (step < 16) { // If not completed, add to count
				runningCount++;
			}

			if (cnt % displayModulo == 0) {
				log("  " + alName + "  state: " + state + "   step: " + step);
			}
		}
	
		alErrors = {};
		alWarnings = {};
		alCounters = {};
		alTimers = {};
		alStep = {};
	
		if (runningCount > 0) {
			for (alObj in als) {
				al = alObj.al;

				alObj.step = al.getCurrentStep();
				
				nextStatus = sendNotificationEmail({
					nextStatus: nextStatus,
					opUserEmail: opUserEmail,
					requestID: requestID,
					workEntry: work,
					operation: operation,
					accounts: accounts
				});
			}	

			task.sleep(3000); // Sleep for 3 sec
		}
		
	} while (runningCount > 0);
} catch (excptn) {
	log("ERROR", "Error during " + thisComponent.getName() + " - " + excptn);
}]]></parameter>
            </Script>
            <Script name="Gather metrics">
                <ModTime>1607853082578</ModTime>
                <parameter name="script"><![CDATA[try {
	for (alObj in als) {
		alMetrics = gatherMetrics(alObj.al, errors, warnings, counters, timers);
		
		errors = alMetrics.errors;
		warnings = alMetrics.warnings;
		counters = alMetrics.counters;
		timers = alMetrics.timers;
	}
} catch (excptn) {
	log("ERROR", "Error during " + thisComponent.getName() + " - " + excptn);
}]]></parameter>
            </Script>
            <Script name="End of processing">
                <ModTime>1606212047241</ModTime>
                <parameter name="script"><![CDATA[log("\n\n-----");
log(opNoun + " complete!");

timer.stop("entire process");

// Confidently set the responseCode to 200, if it's not already set
responseCode = work.getString("http.responseCode") || "200";
work["http.responseCode"] = responseCode;]]></parameter>
            </Script>
        </ContainerDF>
        <ThreadOptions>
            <parameter name="assemblyline.ehc.executeProlog">false</parameter>
            <parameter name="assemblyline.ehc.maxInstance">10</parameter>
            <parameter name="assemblyline.ehc.minPrepare">5</parameter>
        </ThreadOptions>
        <Operations/>
        <InitParams>
            <Schema name="AssemblyLineInitParams"/>
        </InitParams>
    </AssemblyLine>
</MetamergeConfig>