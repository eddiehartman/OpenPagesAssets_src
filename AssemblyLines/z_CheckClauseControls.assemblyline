<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="604" UUID="02553e44-fd3f-4bed-9240-f9777b3e0ff6" created="Wed Aug 19 12:22:55 CEST 2020" createdBy="eddie" main="z_CheckClauseControls" modified="Thu Dec 17 20:08:16 CET 2020" modifiedBy="eddie" project="POC_MVP" version="7.1.1">
    <Container name="References"/>
    


















































<AssemblyLine name="z_CheckClauseControls">
        <ModTime>1608232096542</ModTime>
        <Settings>
            <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
            <parameter name="automapattributes">false</parameter>
            <parameter name="createTombstones">false</parameter>
            <parameter name="includeGlobalPrologs">true</parameter>
            <parameter name="includePrologs"><![CDATA[ClauseControlObj
DeviationsMap
ExcelObj
MailObj
Mapper
OpenPagesObj
Script_Lib
Timer
ccUpdateObj
ePolicyObj]]></parameter>
            <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
        </Settings>
        <Hooks>
            <Hook name="epilog2">
                <InheritFrom>[no inheritance]</InheritFrom>
                <Name>epilog2</Name>
                <Script><![CDATA[errors = {};
errors[accountName] = [];
if (_errors.length > 0) {
	errors[accountName].push(_errors[0]);
}	
resetErrors();

counters = {};
counters[accountName] = {
	Policy: 1
}

migrationEnd = new Date();

log("\n\n\n\n    NOT SENDING EMAIL\n\n\n\n.")
return;
sendEmail(opUserEmail)]]></Script>
                <Enabled>true</Enabled>
            </Hook>
        </Hooks>
        <CheckpointConfig/>
        <SandboxConfig/>
        <SimulationConfig>
            <SimulationStates>
                <Component name="Setup Id and context" state="Enabled"/>
                <Component name="ValidateMappingTableRefs" state="Enabled"/>
                <Component name="define functions" state="Enabled"/>
                <Component name="define service functions" state="Enabled"/>
                <Component name="Match_em" state="Enabled"/>
                <Component name="Correct Clause Controls" state="Enabled"/>
                <Component name="Add Change Info To Clauses" state="Enabled"/>
                <Component name="Check CC Update" state="Enabled"/>
                <Component name="Advance Policy Through Statii" state="Enabled"/>
                <Component name="OpenPages Connector" state="Enabled"/>
            </SimulationStates>
            <ProxySettings/>
        </SimulationConfig>
        <LogConfig/>
        <ContainerEF name="EntryFeedContainer"/>
        <ContainerDF name="DataFlowContainer">
            <ModTime>1608232096542</ModTime>
            <Script name="Setup Id and context">
                <InheritFrom>[no inheritance]</InheritFrom>
                <ModTime>1608232096542</ModTime>
                <parameter name="script"><![CDATA[//policyName = "POL-2028-Acc-341-AG"; // 1089, 1091, 1093
policyName = "POL-2032-Acc-421-AG";
ePolicyAccountName = "Independent Electricity System Operator";
CSDid = "8065"; // Copa
//policyName = "POL-2032-Acc-421-AG";
//ePolicyAccountName = "Copacabana";
//CSDid = "5685"; // Copa
//ePolicyAccountName = "harshithatest";

opUserEmail = ["eddiehartman@gmail.com"/*,"blade@us.ibm.com"*/];
accounts = ["hashithatest"];
operation = "migrate";

ePolicyAccount = system.newEntry();
ePolicyAccount.name = ePolicyAccountName.toUpperCase();
ePolicyAccount.ePolicy_Account_Name = ePolicyAccountName.toUpperCase;

opAccount = system.newEntry();

accountName = accounts[0];

debug = false;
doMigration = true;
skipToEnd = false;
timer = new Timer();

migrationStart = new Date();
ePolicy = {
/*		
	    userName: "db2inst1",
	    password: "Epolicy2ibm@123",
	    hostname: "mopbzp174025.fr.dst.ibm.com",
	    port: "50000",
	    database: "POLICYL"
/**/
/**/
	    userName: "cwpdb",
	    password: "DnqE4bCmGUFMwZHZ",
	    hostname: "146.89.38.141",
	    port: "60000",
	    database: "EPOLICY"
/**/	    
	  }

log("\n\n\n----------- Using Policy: " + policyName + "\n\n\n.");

mappingTable = {};

if (typeof opCtr == "undefined") {
	opCtr = null;	
}
op = new OpenPagesObj(opCtr);

db = new ePolicyObj({
	    userName: ePolicy.userName,
	    password: ePolicy.password,
	    hostName: ePolicy.hostname,
	    port: ePolicy.port,
	    database: ePolicy.database
	  });

//var CSDjson = '{"TEMPLATE_ID":1288,"TEMPLATE_TYPE_ID":2,"ACCOUNT_ID":1248,"TEMPLATE_TYPE_NAME":"Base Policy","NEXT_REVIEW_DATE":"2018-07-11","ACCOUNT_NUMBER_TYPE_NAME":null,"STATUS":"Production","EMAIL":"jrvalero@us.ibm.com","DELETED_TS":null,"LOCKED_FLAG":"N","FULL_NAME":"United States of America","NAME":"Customer Security Document","POLICY_TYPE_ID":24,"ID":5685,"REVISION":1,"CURRENT_APPROVAL_DATE":"2017-01-11","FILE_NAME":"","IMPORTED_FLAG":"N","TEMPLATE_POLICYTYPE_NAME":"CSD","LOCATION_ID":245,"LOCKED_BY":null,"REVISION_COUNT":1,"STATUS_ID":7,"ENVIRONMENT":"","TEMPLATE_POLICYTYPE_ID":24,"UPDATED_TS":"2014-10-09 18:28:05.614806","POLICY_TYPE_NAME":"CSD","LOCKED_TS":null,"TEMPLATE_VERSION":"1.2                      ","FORMAT":"DOCX","POLICY_ID":3003,"ACCOUNT_NUMBER":"","SHORTNAME":"CBANA","HISTORY_FLAG":"Y"}';
//var CSDjson = '{"TEMPLATE_ID":2490,"TEMPLATE_TYPE_ID":2,"ACCOUNT_ID":4899,"TEMPLATE_TYPE_NAME":"Base Policy","NEXT_REVIEW_DATE":"2018-12-20","ACCOUNT_NUMBER_TYPE_NAME":null,"STATUS":"Production","EMAIL":"harshib2@in.ibm.com","DELETED_TS":null,"LOCKED_FLAG":"N","FULL_NAME":"India","NAME":"Customer Security Document_V2.1.1","POLICY_TYPE_ID":24,"ID":11678,"REVISION":2,"CURRENT_APPROVAL_DATE":"2017-06-20","FILE_NAME":"","IMPORTED_FLAG":"N","TEMPLATE_POLICYTYPE_NAME":"CSD","LOCATION_ID":140,"LOCKED_BY":null,"REVISION_COUNT":2,"STATUS_ID":7,"ENVIRONMENT":"","TEMPLATE_POLICYTYPE_ID":24,"UPDATED_TS":"2017-06-21 12:56:41.765328","POLICY_TYPE_NAME":"CSD","LOCKED_TS":null,"TEMPLATE_VERSION":"2.1.1                    ","FORMAT":"DOCX","POLICY_ID":7832,"ACCOUNT_NUMBER":"","SHORTNAME":"HBT","HISTORY_FLAG":"Y"}';
//var CSDjson = '{"TEMPLATE_ID":2490,"TEMPLATE_TYPE_ID":2,"ACCOUNT_ID":4899,"TEMPLATE_TYPE_NAME":"Base Policy","NEXT_REVIEW_DATE":"2018-12-20","ACCOUNT_NUMBER_TYPE_NAME":null,"STATUS":"Production","EMAIL":"harshib2@in.ibm.com","DELETED_TS":null,"LOCKED_FLAG":"N","FULL_NAME":"India","NAME":"Customer Security Document_V2.1.1","POLICY_TYPE_ID":24,"ID":11678,"REVISION":2,"CURRENT_APPROVAL_DATE":"2017-06-20","FILE_NAME":"","IMPORTED_FLAG":"N","TEMPLATE_POLICYTYPE_NAME":"CSD","LOCATION_ID":140,"LOCKED_BY":null,"REVISION_COUNT":2,"STATUS_ID":7,"ENVIRONMENT":"","TEMPLATE_POLICYTYPE_ID":24,"UPDATED_TS":"2017-06-21 12:56:41.765328","POLICY_TYPE_NAME":"CSD","LOCKED_TS":null,"TEMPLATE_VERSION":"2.1.1                    ","FORMAT":"DOCX","POLICY_ID":7832,"ACCOUNT_NUMBER":"","SHORTNAME":"HBT","HISTORY_FLAG":"Y"}';

//var CSD = work.fromJSON(CSDjson);

CSDList = db.query("policy", ePolicyAccount);
for (CSD in CSDList) {
	if (CSD.getString("id") == CSDid) {
		log("==== FOUND CSD: " + CSD.toJSON());
		break;
	}
}

CSD.csd_status = CSD.status;

log("Lookup Policy " + policyName + "...");
var newPolicy = op.findOne("Name", policyName, "Policy");
if (newPolicy == null) {
	log("ERROR", "Unable to find Policy: " + policyName);
	throw "Unable to find Policy: " + policyName
}

var id = newPolicy.getString("Resource ID");
var newPolicyId = id;

log("\n\n\n======================-----> Found " + policyName + " (" + id 
		+ ") - Status: " 
		+ newPolicy.getString("OPSS-Pol:Status")
		+ "\n\n\n.");
/*
cc = new ClauseControlObj({
	openPagesObj: op,
	debug: false
});
*/
ccUpdate = new ccUpdateObj();

// Defining some local functions for this AL
// Initialize 'created' object
_counters = {};
_errors = [];
_warnings = [];]]></parameter>
            </Script>
            <Script name="ValidateMappingTableRefs">
                <InheritFrom>/Scripts/ePolicy2OP_Validate MappingTable Refs</InheritFrom>
                <ModTime>1603372171245</ModTime>
            </Script>
            <Script name="define functions">
                <InheritFrom>/Scripts/ePolicy2OP_define functions</InheritFrom>
                <ModTime>1603372162988</ModTime>
            </Script>
            <Script name="define service functions">
                <InheritFrom>/Scripts/ePolicy2OP_define service functions</InheritFrom>
                <ModTime>1602513657744</ModTime>
            </Script>
            <Script name="Match_em">
                <ModTime>1608216664505</ModTime>
                <parameter name="enabled">true</parameter>
                <parameter name="script"><![CDATA[devMapObj = new DeviationMap({id: id, op: op, db: db});

devWorkbook = devMapObj.buildWorkbook({name: "TestDevMap"});
devWorkbook.write("temp/_TestDevMap_" 
					+ formatDate(new Date(), "yyyyMMdd_HHmmss") 
					+ ".xlsx");

var entry = system.newEntry();
var updates = devMapObj.mapOfUpdates();
var keys = updates.cc.keySet().toArray();

log("Total changes: " + updates.cc.size());

for (ref in updates.cc) {
	devObj = updates.cc[ref];
	if (!devObj.update) continue;
	log(toJson(devObj));
}

//system.exitFlow();]]></parameter>
            </Script>
            <Script name="Correct Clause Controls">
                <InheritFrom>/Scripts/ePolicy2OP_Correct Clause Controls</InheritFrom>
                <ModTime>1606230712668</ModTime>
                <parameter name="enabled">false</parameter>
            </Script>
            <Script name="Add Change Info To Clauses">
                <InheritFrom>/Scripts/ePolicy2OP_Add Change Info To Clauses</InheritFrom>
                <ModTime>1606223536749</ModTime>
                <parameter name="enabled">false</parameter>
            </Script>
            <Script name="Check CC Update">
                <ModTime>1605188651891</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script"><![CDATA[// Check that updates to CCs is according to plan
var ccTypes = {
	RR: true,
	RV: true
}

log("Checking updates to Clause Controls...");
var bad = [];
var ccType = "RV";
for (var ref in devMapObj.opMap[ccType]) {
	var ccObj = devMapObj.opMap[ccType][ref];

	// Look up what is written to OP
	var ccEntry = op.findOne("Name", ccObj.name, "GTSClauseCtl");
	if (ccEntry == null) {
		throw "Cannot find " + ccObj.name + " (" + ccObj.ref + ")";
	}
	
	if (ccObj.col3 != ccEntry.getString("GTS-ClauseCtl:Col3")) {
		bad.push(ccObj.name + " (" + ccObj.ref);
	}
}

if (bad.length > 0) {
	log("FATAL", "These CCs were incorrectly updated:\n" + bad.join("\n"));
	throw "Invalid changes to Col3 of Clause Controls";
}

log("Updates check out!");]]></parameter>
            </Script>
            <Script name="Advance Policy Through Statii">
                <InheritFrom>/Scripts/ePolicy2OP_Advance Policy Through Statii</InheritFrom>
                <ModTime>1606223543954</ModTime>
                <parameter name="enabled">false</parameter>
            </Script>
            <Connector name="OpenPages Connector">
                <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                <ModTime>1601910877012</ModTime>
                <ConnectorMode>Lookup</ConnectorMode>
                <ConnectorState>Passive</ConnectorState>
                <Configuration>
                    <InheritFrom>[parent]</InheritFrom>
                </Configuration>
                <Parser>
                    <InheritFrom>[parent]</InheritFrom>
                </Parser>
                <AttributeMap name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                </AttributeMap>
                <AttributeMap name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                </AttributeMap>
                <DeltaSettings/>
                <Schema name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                </Schema>
                <Schema name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                </Schema>
                <LinkCriteria>
                    <InheritFrom>[parent]</InheritFrom>
                </LinkCriteria>
                <Hooks>
                    <InheritFrom>[parent]</InheritFrom>
                    <Hook name="after_initialize">
                        <InheritFrom>[no inheritance]</InheritFrom>
                        <Name>after_initialize</Name>
                        <Script>opCtr = thisConnector.connector;</Script>
                        <Enabled>true</Enabled>
                    </Hook>
                </Hooks>
                <CheckpointConfig/>
                <SandboxConfig/>
                <Reconnect>
                    <InheritFrom>[parent]</InheritFrom>
                    <ReconnectRules/>
                </Reconnect>
                <Operations/>
                <PoolDefinition>
                    <InheritFrom>[parent]</InheritFrom>
                </PoolDefinition>
                <PoolInstance/>
            </Connector>
        </ContainerDF>
        <ThreadOptions/>
        <Operations/>
        <InitParams>
            <Schema name="AssemblyLineInitParams"/>
        </InitParams>
    </AssemblyLine>
</MetamergeConfig>