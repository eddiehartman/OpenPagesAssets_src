<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="1" UUID="a05b82b2-02ea-493e-beea-0af954879dc6" created="Mon Sep 21 13:46:28 CEST 2020" createdBy="eddie" main="z_MatchClauseControls" modified="Mon Sep 21 13:46:28 CEST 2020" modifiedBy="eddie" project="POC_MVP" version="7.1.1">
    <AssemblyLine name="z_MatchClauseControls">
        <ModTime>1600684154623</ModTime>
        <Settings>
            <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
            <parameter name="automapattributes">false</parameter>
            <parameter name="createTombstones">false</parameter>
            <parameter name="includeGlobalPrologs">true</parameter>
            <parameter name="includePrologs"><![CDATA[Mapper
OpenPagesObj
Script_Lib
ePolicyObj
ExcelSheet]]></parameter>
            <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
        </Settings>
        <Hooks/>
        <CheckpointConfig/>
        <SandboxConfig/>
        <SimulationConfig>
            <SimulationStates>
                <Component name="define getLatestClauseControl" state="Enabled"/>
                <Component name="define deviationReport" state="Enabled"/>
                <Component name="define deviationsMap" state="Enabled"/>
                <Component name="define buildDeviationReport" state="Enabled"/>
                <Component name="Match_em" state="Enabled"/>
            </SimulationStates>
            <ProxySettings/>
        </SimulationConfig>
        <LogConfig/>
        <ContainerEF name="EntryFeedContainer"/>
        <ContainerDF name="DataFlowContainer">
            <Script name="define getLatestClauseControl">
                <ModTime>1600429716992</ModTime>
                <parameter name="script"><![CDATA[function getLatestClauseControls(ccList) {
	var addToMap = new java.util.HashMap();
	
	for (var cc in ccList) {
		var ref = cc.getString("REF");
		var prevRef = addToMap.get(ref);
		if (prevRef != null) {
			var thisRev = cc.getObject("REVISION");
			if (thisRev < prevRef.rev) {
				log("Skipping " + ref + " with revision: " + thisRev);
				continue;
			}
			var thisTS = cc.getObject("UPDATED_TS");
			if (thisTS < prevRef.ts) {
				log("Skipping " + ref + " with updated_ds: " + thisTS);
				continue;
			}
			addToMap.remove(ref);
		}
		addToMap.put(ref, {
			col2: cc.getString("BASE_RR") || cc.getString("REQUIREMENT"),
			col3: cc.getString("IBM") || cc.getString("REC_VALUE"),
			col4: cc.getString("CUST_XYZ") || "",
			rev: cc.getObject("REVISION") || "",
			ts: cc.getObject("UPDATED_TS") || ""
		});
	}
	
	return addToMap;
}]]></parameter>
            </Script>
            <Script name="define deviationReport">
                <ModTime>1600429286588</ModTime>
                <parameter name="script"><![CDATA[function deviationReport(id, op, db) {

	var result = {
		notFoundIn: {
			OpenPages: [],
			ePolicy: []
		},
		totalFoundIn: {
			OpenPages: 0,
			ePolicy: 0
		},
		foundInBoth: {},
		differentDescriptions: {},
		differentDescriptionsCount: 0	
	}
	
	//pol = op.find("Name", "POL-723-Acc-341-AG");
	//log(pol);
	//return;
	
	// Get Control Clauses created for the policy in OpenPages
	var clauses = op.findChildren("Policy", id, "Procedure");
	var opMap = new java.util.HashMap();
	
	for (var clause in clauses) {
		//log("Clause: " + clause.Description);
		var cid = clause.getObject("Resource ID");
		
		var controls = op.findChildren("Procedure", cid, "GTSClauseCtl");
		for (var control in controls) {
			//elog("--- control: " + control.Description + " - " + control.toJSON());
			opMap.put(control.getString("Description"), control);
		}
	}
	
	// Now get all Clause Controls from ePolicy
	
	// This is the CSD found for Copa in ePolicy
	var CSD = work.fromJSON('{"REVISION":1,"REVISION_COUNT":1,"FORMAT":"DOCX","SHORTNAME":"CBANA","TEMPLATE_VERSION":"1.2                      ","LOCKED_TS":null,"STATUS":"Production","NEXT_REVIEW_DATE":"2018-07-11","ACCOUNT_NUMBER":"","LOCKED_FLAG":"N","TEMPLATE_POLICYTYPE_ID":24,"UPDATED_TS":"2014-10-09 18:28:05.614806","CURRENT_APPROVAL_DATE":"2017-01-11","TEMPLATE_TYPE_NAME":"Base Policy","TEMPLATE_POLICYTYPE_NAME":"CSD","csd_fileext":"docx","csd_filename":"Customer Security Document__CSD_CBANA_2014-10-09-18.28.05.614806","ID":5685,"FULL_NAME":"United States of America","ACCOUNT_NUMBER_TYPE_NAME":null,"ENVIRONMENT":"","EMAIL":"jrvalero@us.ibm.com","TEMPLATE_ID":1288,"NAME":"Customer Security Document","POLICY_TYPE_NAME":"CSD","STATUS_ID":7,"DELETED_TS":null,"IMPORTED_FLAG":"N","TEMPLATE_TYPE_ID":2,"POLICY_ID":3003,"POLICY_TYPE_ID":24,"ACCOUNT_ID":1248,"FILE_NAME":"","LOCKED_BY":null,"LOCATION_ID":245,"HISTORY_FLAG":"Y"}');
	
	// Read Clause controls from epolicy
	// Putting RR clausectl entries in the rrMap
	var ccListRR = db.query("control_clause_rr", CSD);
	var rrMap = getLatestClauseControls(ccListRR);

	// And putting RV clausectl entries in the rvMap
	var ccListRV = db.query("control_clause_rv", CSD);
	var rvMap = getLatestClauseControls(ccListRV);

	var epMap = new java.util.HashMap();
	epMap.putAll(rrMap);
	epMap.putAll(rvMap);
	
	result.totalFoundIn.OpenPages = opMap.size();
	result.totalFoundIn.ePolicy = epMap.size();
	
	var epArray = rrMap.keySet().toArray();// Get Clause Controls for the policy from OpenPages
	java.util.Arrays.sort(epArray);
	for (ref in epArray) {
		opCCEntry = opMap.get(ref);
		
		if (opCCEntry == null) {
			result.notFoundIn.OpenPages.push(ref)
		} else {
			result.foundInBoth[ref] = true;
		}
	}
	
	var keys = opMap.keySet().toArray();
	java.util.Arrays.sort(keys);
	for (key in keys) {
		var epObj = epMap.get(key);
		var opEntry = opMap.get(key);
		
		if (epObj == null) {
			result.notFoundIn.ePolicy.push(key);		
		} else {
			result.foundInBoth[key] = true;

			var opDesc = String(opEntry.getString("GTS-ClauseCtl:Col2")).trim();
			var epDesc = epObj.col2.trim();
			if (opDesc.replaceAll("\n","|").replaceAll("  ", " ") 
				!= epDesc.replaceAll("\n","|").replaceAll("  ", " ")) {
				result.differentDescriptionsCount++;
				result.differentDescriptions[key] = {
					OpenPages: opDesc,
					ePolicy: epDesc
				}
			}
		}
	}
	
	var foundInBoth = [];
	for (var ref in result.foundInBoth) {
		foundInBoth.push(ref);
	}
	
	result.foundInBoth = foundInBoth.length;
	
	return result;
}]]></parameter>
            </Script>
            <Script name="define deviationsMap">
                <ModTime>1600683997389</ModTime>
                <parameter name="script"><![CDATA[// Determine differences between ePolicy and OpenPages regarding Control Clauses for the
// specified Policy (id).
// The op argument is an initialized OpenPagesObj, and db is ePolicyObj
function deviationsMap(id, op, db) {
	this.name = "deviationsMap";
	var result = new java.util.HashMap();
	
	//pol = op.find("Name", "POL-723-Acc-341-AG");
	//log(pol);
	//return;
	
	// Get Control Clauses created for the policy in OpenPages
	var clauses = op.findChildren("Policy", id, "Procedure");
	var opMap = new java.util.HashMap();
	
	for (var clause in clauses) {
		//log("Clause: " + clause.Description);
		var cid = clause.getObject("Resource ID");
		
		var controls = op.findChildren("Procedure", cid, "GTSClauseCtl");
		for (var control in controls) {
			//elog("--- control: " + control.Description + " - " + control.toJSON());
			opMap.put(control.getString("Description"), control);
		}
	}
	
	log("Read " + opMap.size() + " Clause Controls from OpenPages");
	
	// Now get all Clause Controls from ePolicy
	
	// This is the CSD found for Copa in ePolicy
	var CSD = work.fromJSON('{"REVISION":1,"REVISION_COUNT":1,"FORMAT":"DOCX","SHORTNAME":"CBANA","TEMPLATE_VERSION":"1.2                      ","LOCKED_TS":null,"STATUS":"Production","NEXT_REVIEW_DATE":"2018-07-11","ACCOUNT_NUMBER":"","LOCKED_FLAG":"N","TEMPLATE_POLICYTYPE_ID":24,"UPDATED_TS":"2014-10-09 18:28:05.614806","CURRENT_APPROVAL_DATE":"2017-01-11","TEMPLATE_TYPE_NAME":"Base Policy","TEMPLATE_POLICYTYPE_NAME":"CSD","csd_fileext":"docx","csd_filename":"Customer Security Document__CSD_CBANA_2014-10-09-18.28.05.614806","ID":5685,"FULL_NAME":"United States of America","ACCOUNT_NUMBER_TYPE_NAME":null,"ENVIRONMENT":"","EMAIL":"jrvalero@us.ibm.com","TEMPLATE_ID":1288,"NAME":"Customer Security Document","POLICY_TYPE_NAME":"CSD","STATUS_ID":7,"DELETED_TS":null,"IMPORTED_FLAG":"N","TEMPLATE_TYPE_ID":2,"POLICY_ID":3003,"POLICY_TYPE_ID":24,"ACCOUNT_ID":1248,"FILE_NAME":"","LOCKED_BY":null,"LOCATION_ID":245,"HISTORY_FLAG":"Y"}');
	
	// Read Clause controls from epolicy
	// Putting RR clausectl entries in the rrMap
	var ccListRR = db.query("control_clause_rr", CSD);
	var rrMap = getLatestClauseControls(ccListRR);

	// And putting RV clausectl entries in the rvMap
	var ccListRV = db.query("control_clause_rv", CSD);
	var rvMap = getLatestClauseControls(ccListRV);

	var epMap = new java.util.HashMap();
	epMap.putAll(rrMap);
	epMap.putAll(rvMap);
	
	log("Read " + epMap.size() + " Clause Controls from ePolicy");
	
	// Note all CCs found in ePolicy, but not in OpenPages
	var epArray = rrMap.keySet().toArray();
	java.util.Arrays.sort(epArray);
	for (ref in epArray) {
		opCCEntry = opMap.get(ref);
		
		if (opCCEntry == null) {
			result.put(ref, {
				OpenPages: true
			})
		}
	}
	
	// Now look for all CCs found in OpenPages, but not in ePolicy
	var keys = opMap.keySet().toArray();
	java.util.Arrays.sort(keys);
	for (ref in keys) {
		var epObj = epMap.get(ref);
		var opEntry = opMap.get(ref);
		var resObj = result.get(ref);
		
		if (epObj == null) {
			resObj = resObj || {};
			resObj.ePolicy = true;
		} else {
			// If found both, check that the descriptions match
			var opDesc = String(opEntry.getString("GTS-ClauseCtl:Col2")).trim();
			var epDesc = epObj.col2.trim();
			if (opDesc.replaceAll("\n","|").replaceAll("  ", " ") 
				!= epDesc.replaceAll("\n","|").replaceAll("  ", " ")) {
				resObj = resObj || {};
				resObj.desc = {
					OpenPages: opDesc,
					ePolicy: epDesc
				};
			}
			
			// Now check that Col3 and Col4 hold the values A, P or NA in OpenPages
			var checkFields = {
				col3: "GTS-ClauseCtl:Col3",
				col4: "GTS-ClauseCtl:Col4"
			}

			for (var field in checkFields) {
				var fieldValue = opEntry.getString(checkFields[field]);
				if (invalidValue(fieldValue, ["P", "A", "NA"], true)) {
					resObj = resObj || {};
					resObj[field] = fieldValue;
				}
			}			
		}
		
		if (resObj != null) {
			if (result.containsKey(resObj)) {
				result.remove(resObj)
			}
			result.put(ref, resObj);
		}
	}
	
	return result;
}]]></parameter>
            </Script>
            <Script name="define buildDeviationReport">
                <ModTime>1600684032298</ModTime>
                <parameter name="script"><![CDATA[// Determine differences between ePolicy and OpenPages regarding Control Clauses for the
// specified Policy (id).
// The op argument is an initialized OpenPagesObj, and db is ePolicyObj
function buildDeviationReport(id, op, db, devMap) {
	var ex = new ExcelSheet({
		sheetFileName: "Deviation Report for Migration.xlsx",
		sheetName: "Deviations",
		columnNames: "Clause Control;Missing in OpenPages;Missing In ePolicy;Invalid Col3;Invalid Col4;Description"
	});
	
	devMap = devMap || deviationsMap(id, op, db);
	var refs = devMap.keySet().toArray();
	java.util.Arrays.sort(refs);
	
	var e = system.newEntry();
	for (ref in refs) {
		resObj = devMap.get(ref);
		e.removeAllAttributes();
		e["Clause Control"] = ref;
		e["Missing in OpenPages"] = resObj.OpenPages ? "-OpenPages-" : null;
		e["Missing in ePolicy"] = resObj.ePolicy ? "-ePolicy-" : null;
		if (resObj.desc) {
			e.addAttributeValue("Description", "OpenPages: " + resObj.desc.OpenPages);
			e.addAttributeValue("Description", "  ePolicy: " + resObj.desc.ePolicy);
		}
		
		if (typeof resObj.col3 != "undefined") {
			e["Invalid Col3"] = resObj.col3;
		}
		if (typeof resObj.col4 != "undefined") {
			e["Invalid Col4"] = resObj.col4;
		}

		ex.addRow(e);
	}	

	ex.writeSheet();
	
	return ex;	
}]]></parameter>
            </Script>
            <Script name="Match_em">
                <ModTime>1600684154623</ModTime>
                <parameter name="script"><![CDATA[id = 109998; // newly generated policy

op = new OpenPagesObj();

db = new ePolicyObj({
	    userName: "db2inst1",
	    password: "Epolicy2ibm@123",
	    hostName: "mopbzp174025.fr.dst.ibm.com",
	    port: "50000",
	    database: "POLICYL"
	  });

devMap = deviationsMap(id, op, db);
log("Creating sheet...");
devSheet = buildDeviationReport(id, op, db, devMap);
return;

//devReport = deviationReport(id, op, db);
devReport = deviationsMap(id, op, db);
refs = devReport.keySet().toArray();
java.util.Arrays.sort(refs);

for (ref in refs) {
	resObj = devReport.get(ref)
	log(LJ(ref, 20)
		+ " "
		+ (resObj.OpenPages ? " OP " : "    ")
		+ (resObj.ePolicy ? " ePolicy " : "         ")
		+ (resObj.desc ? "    DESC " : "         "))
}]]></parameter>
            </Script>
        </ContainerDF>
        <ThreadOptions/>
        <Operations/>
        <InitParams>
            <Schema name="AssemblyLineInitParams"/>
        </InitParams>
    </AssemblyLine>
</MetamergeConfig>