<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="46" UUID="a52b8fb1-ef7a-4f34-9d92-15518e9a0306" created="Thu May 07 22:12:14 CEST 2020" createdBy="eddie" main="verify" modified="Fri Aug 14 15:35:16 CEST 2020" modifiedBy="eddie" project="POC_MVP" version="7.1.1">
    <AssemblyLine name="verify">
        <ModTime>1597396873544</ModTime>
        <Settings>
            <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
            <parameter name="automapattributes">false</parameter>
            <parameter name="createTombstones">false</parameter>
            <parameter name="includeGlobalPrologs">true</parameter>
            <parameter name="includePrologs"><![CDATA[SCP
Script_Lib
]]></parameter>
            <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
        </Settings>
        <Hooks>
            <Hook name="prolog0">
                <InheritFrom>[no inheritance]</InheritFrom>
                <Name>prolog0</Name>
                <Script><![CDATA[//vrs = "20200601 2028"; // Updated to check GSA connection
vrs = "20200604 1327"; // Added geo to properties list]]></Script>
                <Enabled>true</Enabled>
            </Hook>
        </Hooks>
        <CheckpointConfig/>
        <SandboxConfig/>
        <SimulationConfig>
            <SimulationStates>
                <Component name="Check properties" state="Enabled"/>
                <Component name="OpenPages Connector" state="Enabled"/>
                <Component name="Test ePolicy Server connection" state="Enabled"/>
                <Component name="Test GSA connection" state="Enabled"/>
            </SimulationStates>
            <ProxySettings/>
        </SimulationConfig>
        <LogConfig/>
        <ContainerEF name="EntryFeedContainer"/>
        <ContainerDF name="DataFlowContainer">
            <ModTime>1597396873544</ModTime>
            <Script name="Check properties">
                <ModTime>1597396873544</ModTime>
                <parameter name="script"><![CDATA[function showPropValue(propName) {
	if (propName.toLowerCase().contains("password")
		|| propName.toLowerCase().contains("hostkey")) {
		return "******* "
	} else {
		return system.getTDIProperty(propName);
	}
}

propNames = [
	"op.url",
	"op.username",
	"op.password",
	"gsa.username",
	"gsa.password",
	"gsa.hostkey",
	"gsa.folder.path",
	"gsa.hostname",
//	"winscp.path",
	"schedule",
//	"epolicy.db.url",
//	"epolicy.db.driver",
//	"epolicy.db.username",
//	"epolicy.db.password",
//	"epolicy.db.schema",
//	"policy.template",
	"geo"
];

missing = [];

log("OS detected: " + _OS);

log("Checking properties...")
for (index in propNames) {
	prop = propNames[index];
	if (!(system.getTDIProperty(prop) || "")) {
		missing.push(prop);
	} else {
		log("  " + prop + ": " + showPropValue(prop));
	}
}

if (missing.length > 0) {
	log("ERROR", "Missing parameters: \n" + missing.join("\n    "));
} else {
	log("...all properties found!")
}]]></parameter>
            </Script>
            <Connector name="OpenPages Connector">
                <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                <ModTime>1589201451929</ModTime>
                <ConnectorMode>Iterator</ConnectorMode>
                <ConnectorState>Enabled</ConnectorState>
                <Configuration>
                    <InheritFrom>[parent]</InheritFrom>
                    <parameter name="object">SOXRisk</parameter>
                    <parameter name="query"/>
                </Configuration>
                <Parser>
                    <InheritFrom>[parent]</InheritFrom>
                </Parser>
                <AttributeMap name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                </AttributeMap>
                <AttributeMap name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                </AttributeMap>
                <DeltaSettings>
                    <WhenToCommit>After every database operation</WhenToCommit>
                    <RowLocking>SERIALIZABLE</RowLocking>
                    <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                </DeltaSettings>
                <Schema name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                </Schema>
                <Schema name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                </Schema>
                <LinkCriteria>
                    <InheritFrom>[parent]</InheritFrom>
                </LinkCriteria>
                <Hooks>
                    <InheritFrom>[parent]</InheritFrom>
                    <Hook name="before_execute">
                        <InheritFrom>[no inheritance]</InheritFrom>
                        <Name>before_execute</Name>
                        <Script>log("Checking connection to OpenPages...");</Script>
                        <Enabled>true</Enabled>
                    </Hook>
                    <Hook name="before_initialize">
                        <InheritFrom>[no inheritance]</InheritFrom>
                        <Name>before_initialize</Name>
                        <Script/>
                        <Enabled>false</Enabled>
                    </Hook>
                    <Hook name="default_ok">
                        <InheritFrom>[no inheritance]</InheritFrom>
                        <Name>default_ok</Name>
                        <Script>log("...success!")</Script>
                        <Enabled>true</Enabled>
                    </Hook>
                </Hooks>
                <CheckpointConfig/>
                <SandboxConfig/>
                <Reconnect>
                    <InheritFrom>[parent]</InheritFrom>
                    <ReconnectRules/>
                </Reconnect>
                <Operations/>
                <PoolDefinition>
                    <InheritFrom>[parent]</InheritFrom>
                </PoolDefinition>
                <PoolInstance/>
            </Connector>
            <Script name="Test ePolicy Server connection">
                <ModTime>1597396914269</ModTime>
                <parameter name="script"/>
            </Script>
            <Script name="Test GSA connection">
                <ModTime>1591036496797</ModTime>
                <parameter name="script"><![CDATA[log("Testing connectivity to GSA...");

var scp = new SCP(system.getTDIProperty("gsa.hostname"), 
						system.getTDIProperty("gsa.username"),
						system.getTDIProperty("gsa.password"),
						system.getTDIProperty("gsa.hostkey"));
// Create test file
var filepath = "POC_MVP/test.txt";
var file = system.openFileForOutput(filepath);
file.write("Test file to verify GSA transfer ability...");
file.close();
// Try to transfer it to GSA
try {
	scp.put(filepath, system.getTDIProperty("gsa.folder.path"));
	log("...success!")
} catch (ex) {
	log("Error transfer test file (" + filepath + ") to GSA");
}

// Now delete the test file
if (system.deleteFile(filepath)) {
	log("Test file (" + filepath + ") deleted.");
} else {
	log("ERROR", "Unable to delete test file (" + filepath + ")");
}]]></parameter>
            </Script>
        </ContainerDF>
        <ThreadOptions/>
        <Operations/>
        <InitParams>
            <Schema name="AssemblyLineInitParams"/>
        </InitParams>
    </AssemblyLine>
</MetamergeConfig>