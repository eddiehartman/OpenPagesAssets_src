<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="22" UUID="3f6d9eb6-1f91-47a5-9af6-69b13411da24" created="Wed Dec 02 16:08:14 CET 2020" createdBy="eddie" main="z_ApachePOI_ReadWordDoc_LookForChapters" modified="Tue Feb 16 17:40:54 CET 2021" modifiedBy="edbir" project="_test" version="7.1.1">
    <AssemblyLine name="z_ApachePOI_ReadWordDoc_LookForChapters">
        <ModTime>1613493654657</ModTime>
        <Settings>
            <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
            <parameter name="automapattributes">false</parameter>
            <parameter name="createTombstones">false</parameter>
            <parameter name="includeGlobalPrologs">true</parameter>
            <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
        </Settings>
        <Hooks/>
        <CheckpointConfig/>
        <SandboxConfig/>
        <SimulationConfig>
            <SimulationStates>
                <Component name="ePolicy2OP_define functions" state="Enabled"/>
                <Component name="Read Word doc" state="Enabled"/>
                <Component name="Read Word doc_1" state="Enabled"/>
            </SimulationStates>
            <ProxySettings/>
        </SimulationConfig>
        <LogConfig/>
        <ContainerEF name="EntryFeedContainer"/>
        <ContainerDF name="DataFlowContainer">
            <Script name="ePolicy2OP_define functions">
                <InheritFrom>/Scripts/ePolicy2OP_define functions</InheritFrom>
                <ModTime>1610622625719</ModTime>
            </Script>
            <Script name="Read Word doc">
                <ModTime>1610623022222</ModTime>
                <parameter name="script"><![CDATA[folder = "/media/psf/Home/Downloads";
filenames = [
	"(更新版)Customer_Security_Document_V1.3__CSD_Japan_Japan.docx",
	"Customer Security Document_V2.1.1__CSD_HBT_2017-06-21-12.56.41.765328.docx",
	"Customer Security Document__CSD_CBANA_2014-10-09-18.28.05.614806.docx"
]

csdDoc = {name: "Testing"};

function log(lvl, msg) {
	if (typeof msg == "undefined") {
		msg = lvl;
		lvl = "INFO";
	}
	task.logmsg(lvl, msg);
}

versionSubversion = {
	template: {
		value: "?.?",
		match: "template version:"
	},
	policy: {
		value: "?.?",
		match: "document identification:"
	}
}

headerStyles = {
	TOC1: true,
	Header1: true,
	11: true
}

fs = java.nio.file.FileSystems.getDefault();
for (i in filenames) {
	filename = filenames[i];
	log("\n--------------------- " + filename);
	filepath = folder + "/" + filename;
	
	//fs = new org.apache.poi.poifs.filesystem.POIFSFileSystem(new java.io.FileInputStream(filepath));
	//doc = new org.apache.poi.hwpf.HWPFDocument(fs);
	path = fs.getPath(filepath, []);
	bytesarr = java.nio.file.Files.readAllBytes(path);
	//fis = new java.io.FileInputStream(filepath);

	versionSubversion = findVersion(versionSubversion, bytesarr);
}]]></parameter>
            </Script>
            <Script name="Read Word doc_1">
                <ModTime>1610620399056</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script"><![CDATA[folder = "/media/psf/Home/Downloads";
filenames = [
	"(更新版)Customer_Security_Document_V1.3__CSD_Japan_Japan.docx",
	"Customer Security Document_V2.1.1__CSD_HBT_2017-06-21-12.56.41.765328.docx",
	"Customer Security Document__CSD_CBANA_2014-10-09-18.28.05.614806.docx"
]

headerStyles = {
	TOC1: true,
	Header1: true,
	11: true
}

for (i in filenames) {
	filename = filenames[i];
	log("\n--------------------- " + filename);
	filepath = folder + "/" + filename;
	
	//fs = new org.apache.poi.poifs.filesystem.POIFSFileSystem(new java.io.FileInputStream(filepath));
	//doc = new org.apache.poi.hwpf.HWPFDocument(fs);
	fis = new java.io.FileInputStream(filepath);
	doc = new org.apache.poi.xwpf.usermodel.XWPFDocument(org.apache.poi.openxml4j.opc.OPCPackage.open(fis));
	paras = doc.getParagraphs();
	laststyle = -1;
	section = 0;
	for (para in paras) {
		runs = para.getRuns();
		for (run in runs) {
			txt = para.getText();
			style = para.getStyle();
			if (style != laststyle && headerStyles[style]) {
				section++;
				log(style + "  -----  " + txt);
			}
			laststyle = style;
		}	
	}
	fis.close();
}]]></parameter>
            </Script>
        </ContainerDF>
        <ThreadOptions>
            <parameter name="assemblyline.ehc.executeProlog">false</parameter>
            <parameter name="assemblyline.ehc.maxInstance">5</parameter>
        </ThreadOptions>
        <Operations/>
        <InitParams>
            <Schema name="AssemblyLineInitParams"/>
        </InitParams>
    </AssemblyLine>
</MetamergeConfig>