<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="246" UUID="02553e44-fd3f-4bed-9240-f9777b3e0ff6" created="Wed Aug 19 12:22:55 CEST 2020" createdBy="eddie" main="z_test" modified="Tue Feb 16 17:40:56 CET 2021" modifiedBy="edbir" project="POC_MVP" version="7.1.1">
    <AssemblyLine name="z_test">
        <ModTime>1613493656132</ModTime>
        <Settings>
            <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
            <parameter name="automapattributes">false</parameter>
            <parameter name="createTombstones">false</parameter>
            <parameter name="includeGlobalPrologs">true</parameter>
            <parameter name="includePrologs"><![CDATA[MailObj
Mapper
OpenPagesObj
Script_Lib
Timer
ePolicyObj]]></parameter>
            <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
        </Settings>
        <Hooks/>
        <CheckpointConfig/>
        <SandboxConfig/>
        <SimulationConfig>
            <SimulationStates>
                <Component name="ePolicy2OP_define service functions" state="Enabled"/>
                <Component name="send mail" state="Enabled"/>
                <Component name="test" state="Enabled"/>
                <Component name="Java code" state="Enabled"/>
            </SimulationStates>
            <ProxySettings/>
        </SimulationConfig>
        <LogConfig/>
        <ContainerEF name="EntryFeedContainer"/>
        <ContainerDF name="DataFlowContainer">
            <Script name="ePolicy2OP_define service functions">
                <InheritFrom>/Scripts/ePolicy2OP_define service functions</InheritFrom>
                <ModTime>1607508936401</ModTime>
            </Script>
            <Script name="send mail">
                <ModTime>1607524172654</ModTime>
                <parameter name="script"><![CDATA[// sendEmail(opUserEmail, 
//				requestID
//				useEntry
//				operation
//				accounts
//				counters, 
//				errors, 
//				warnings, 
//				timers, 
//				"Completed");

_errors = [];
_warnings = [];
requestID = "TESTREQUEST";
useEntry = system.newEntry();
accounts = ["copacabana", "whu", "hashihatest"];
counters = {};
counters.Service = {Policy_Names: []};
errors = {};
warnings = {};
timers = {};
opUserEmail = "eddiehartman@gmail.com";
ePolicy = {hostname: "epolicy.acme.com"};
migrationStart = new Date();

operations = ["validate", "migrate"];
states = ["Initiated", "In Progress", "Completed"];
errmsgs = ["", "Error writing OpenPages object", "Service Error"];

for (a in accounts) {
	accountName = accounts[a];
	var csds = Math.floor(Math.random()*4) + 1;
	for (c = 0; c < csds; c++) {
		counters.Service.Policy_Names.push("CSD"
				+ system.formatDate(new Date(), "ssSS")
				+ " >> POLT-" 
				+ system.formatDate(new Date(), "SSss")
				+ "-" + accountName
				+ "-42" + a);
	}
}

for (o in operations) {
	operation = operations[o];

	for (j in states) {
		state = states[j];
		
		for (k in errmsgs) {
			errmsg = errmsgs[k];
			
			useEntry["http.responseCode"] = "200";
			resetErrors();
			errors = {};
			accountsInError = 0;
			if (errmsg) {
				if (k == (errmsgs.length-1)) {
					log("ERROR", errmsg);
					useEntry["http.responseCode"] = "500";
				} else {
					numErrors = Math.floor(Math.random()*3);
					for (err = 0; err < numErrors; err++) {
						a = Math.floor(Math.random() * accounts.length);
						if (!errors[accounts[a]] || !errors[accounts[a]].length) {
							accountsInError++;
						}
						errors[accounts[a]] = [errmsg];
					}
				}	
			}
			
			log("Sending email -  " + operation + " " + state + " " 
					+ (errmsg ? (errmsg + "(" 
					+ (accountsInError > 0 ? "Account Error" : "Service Error") + ")") : ""));
			sendEmail(opUserEmail, requestID, useEntry, operation, accounts, counters, errors, warnings, timers, state);
		}
	}
}]]></parameter>
            </Script>
            <Script name="test">
                <ModTime>1607509827486</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script">sendEmail(opUserEmail, requestID, useEntry, operation, accounts, counters, errors, warnings, timers, "Completed");</parameter>
            </Script>
            <Script name="Java code">
                <ModTime>1606829825297</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script"><![CDATA[/*
import java.io.*; 
import java.util.ArrayList; 
import java.util.StringTokenizer; 
import java.util.regex.Matcher; 
import java.util.regex.Pattern; 
import org.apache.poi.POIOLE2TextExtractor; 
import org.apache.poi.extractor.ExtractorFactory; 
import org.apache.poi.hpsf.*; 
import org.apache.poi.hwpf.HWPFDocument; 
import org.apache.poi.hwpf.extractor.WordExtractor; 
import org.apache.poi.hwpf.usermodel.Paragraph; 
import org.apache.poi.hwpf.usermodel.Range; 
import org.apache.poi.hwpf.usermodel.Table; 
import org.apache.poi.hwpf.usermodel.TableCell; 
import org.apache.poi.hwpf.usermodel.TableRow; 
import org.apache.poi.poifs.filesystem.POIFSFileSystem; 

import excel.Workbook; 
  
public class readwordIMP 
{ 
        public readwordIMP() 
        { 
                 Table table = null; 
                 TableRow  row = null; 
                 String filesname = "D:\\Akhil\\TEMP\\maths\\limits and contin\\Limits - 1 - Assignment Info\\IITPU1_M_11_1_M.doc"; 

                 ArrayList<String> al=new ArrayList<String>(); 
                try 
                { 
                  POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(filesname));                 
                  HWPFDocument doc = new HWPFDocument(fs);         
                  String character; 
                  Range range = doc.getRange(); 
                  
                  Paragraph tablePar; 
                  tablePar = range.getParagraph(0); 
                
               if (isInTable()) { 
                     table = range.getTable(tablePar); 
                  
                    for (int rowIdx=4; rowIdx<table.numRows(); rowIdx++) 
                    { 
                    row = table.getRow(rowIdx);     
                        System.out.println("row "+(rowIdx+1)+"qwwq"+row.numCells()); 
                        
 ****               Paragraph   tab=row.getParagraph(0); 
                      Table t=row.getTable(tab); 
                      System.out.println("number of rows "+t.NumRows());           ************** 


                  //      for (int colIdx=0; colIdx<row.numCells(); colIdx++) 
                    //    { 
                      //       TableCell cell = row.getCell(colIdx); 
                        //     character=cell.getParagraph(0).text(); 

                              
          
                          //   character=character.substring(0, character.length()-1);                     

                            // al.add(character); 
                            
                        //} 
                      }         
                } 
                
          } catch(Exception e) { 
                    e.printStackTrace(); 
                } 
        } 
        private Paragraph Paragraph(int i) { 
                // TODO Auto-generated method stub 
                return null; 
        } 
        private boolean isInTable() { 
                // TODO Auto-generated method stub 
                return true; 
        } 
        public static void main( String[] args ) 
        { 
                readwordIMP t=new readwordIMP(); 
    } 
}
 * 
 */]]></parameter>
            </Script>
        </ContainerDF>
        <ThreadOptions/>
        <Operations/>
        <InitParams>
            <Schema name="AssemblyLineInitParams"/>
        </InitParams>
    </AssemblyLine>
</MetamergeConfig>