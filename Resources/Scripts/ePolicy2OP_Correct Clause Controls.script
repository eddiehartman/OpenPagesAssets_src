<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="66" UUID="895a380c-cf8d-46b1-9f96-b568566fb3c3" created="Mon Oct 05 13:47:39 CEST 2020" createdBy="eddie" main="ePolicy2OP_Correct Clause Controls" modified="Tue Feb 16 17:40:54 CET 2021" modifiedBy="edbir" project="POC_MVP" version="7.1.1">
    <Script name="ePolicy2OP_Correct Clause Controls">
        <ModTime>1613493654521</ModTime>
        <parameter name="enabled">true</parameter>
        <parameter name="includeFiles"/>
        <parameter name="script"><![CDATA[// Now to process clause controls and update OpenPages as needed
// If validating or in debug mode, skip this script
if (debug || !doMigration || skipToEnd || typeof updates == "undefined" || updates == null) {
	return; // do nothing
}

targetStatus = mapStatus(CSD.csd_status, "Mapping CSD to Policy");

/* The code below is disabled since the spec has changed

// Do not do this step if the target status is Draft
if ("Draft".equalsIgnoreCase(targetStatus)) {
	return;
}

*/

timer.start("Clause Control Correction");
log("Correcting Clause Controls as required...");

// Collect set of changes required to reverse these updates
rollbackMap = new java.util.HashMap();

// Get the keys to the Control Clause updates HashMap and sort them
var keys = updates.cc.keySet().toArray();
java.util.Arrays.sort(keys);

var updateCount = {success: 0, failed: 0};

// Loop through the REFs
for (var ref in keys) {
	// Grab the deviation (change) object from the map
	var rollbackObj = null;
	var changeObj = updates.cc[ref];
 
	// Prepare an Entry for use with the op.update() method
	var entry = system.newEntry();

	var fields = [];

	for (var field in changeObj) {
		if (field != "id" && !field.contains("_TEMPLATE") && field != "originalValue") {
			fields.push(field);
			entry[field] = changeObj[field] || "";
			rollbackObj = rollbackObj 
							 || { 
									ref: ref, 
									value: changeObj.originalValue,
									id: changeObj.id, 
									name: changeObj.name 
								}; 
		}
	}

	// Save rollbackObj if created
	if (rollbackObj != null) {
		this.rollbackMap.put(rollbackObj.ref, rollbackObj);
	}
	
	// Set up the id and name - always required for an update to OpenPages
	entry["Resource ID"] = changeObj.id;
	entry.name = changeObj.name;

	// Get the updated OpenPages object - it could be in either for the maps (one for RV and one for RR)
	var ccType = devMapObj.getCCType(ref);
	//var opObj = devMapObj.devMap.RR.get(ref) || devMapObj.devMap.RV.get(ref);
	
	// Update Col 1 with the REF - as with name for most other objects, this must be included for an update
	entry["GTS-ClauseCtl:Col1"] = ref;
	
	// debug output
	log("DEBUG", "Updating:\n" + entry);

	try {
		ccUpdate.update(entry);
	} catch (ex) {
		log("ERROR", "Error updating " 
						+ ccType
						+ " Clause Control ("
						+ ref
						+ ") - "
						+ ex);
	}
}

var results = ccUpdate.getResults();

updateCount.success = results.success;
updateCount.failed = results.failed;

timer.stop("Clause Control Correction");
log("Update result - success: " + updateCount.success + "   failed: " + updateCount.failed);
log("Rollback map holds " + rollbackMap.size() + " updates");]]></parameter>
    </Script>
</MetamergeConfig>