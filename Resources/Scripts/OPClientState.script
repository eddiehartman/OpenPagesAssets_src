<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="2" UUID="d531b1ed-546c-4ea1-b030-0ecee2317a5d" created="Tue Aug 18 13:49:38 CEST 2020" createdBy="eddie" main="OPClientState" modified="Tue Aug 18 13:49:52 CEST 2020" modifiedBy="eddie" project="POC_MVP" version="7.1.1">
    <Script name="OPClientState">
        <ModTime>1597751391480</ModTime>
        <parameter name="includeFiles"/>
        <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPClientState = function () {
    return {
        grcObjectType : "",
        grcObjectTypeId : null,
        schema : null,
        defaultPrimaryParentObjectId : null, // derived from op_parentType, op_parentLoc props in connector.properties
        current : null,
        validPrimaryParentIds : null,
        invalidPrimaryParentIds : null,
        connectionProperties : null,
        client : null,
        mailer : null,
        feedProps : null,
        http : null,
        //
        // Resource caches that are loaded via query to OpenPages
        //
        fieldDefinitions : null,
        templates : null,
        typesById : null,
        typesByName : null,
        typeDetailsByName : null,
        contentsCache : null,
        defaultCurrencyIsoCode : null,
        largeStringMaxSize : null,
        //
        // Properties shared across all members of an assembly line (instance of java.lang.System.getProperties()).
        // This will be used to cache results of OP queries that will not change over the lifetime of the
        // assembly line, such as type and field definitions, preventing unnecessary reloading of common data.
        //
        properties : null,
        initialize : function (args) {
            this.client = args.client;
            this.mailer = this.client.mailer;
            this.feedProps = this.client.feedProps;
            this.http = this.client.http;
            this.properties = java.lang.System.getProperties();
            this.connectionProperties = new OPConnectionProperties().initialize(args.opConnectSettings);
            this.applyHttpSettings();
            this.initializeHttpParameters();
            // this.initializeOPServerConnection();
            return this;
        },
        /**
         * Set http parameters into the http connector in preparation for
         * sending a request to OpenPages.
         */
        applyHttpSettings : function () {
            var that = this;
            this.connectionProperties.iterateFields(function(fieldName, fieldValue) {
                that.http.setParam(fieldName, fieldValue);
            });
//            if (this.connectionProperties.object) {
//                this.setGrcObjectType(this.connectionProperties.object);
//            }
//			TODO fix hard coding of object
			this.setGrcObjectType(this.connectionProperties.object);
			
            if (this.isDebug())
                this.connectionProperties.deBug = false;
        },
        initializeHttpParameters : function() {
            var cxn = this.connectionProperties;
            // verify required properties are at least present from processing
            // properties files
            if (cxn.url === null || cxn.url === "" || cxn.url.endsWith("/")) {
                this.client.throwException("Required property op_url must be set to a valid URL (with no trailing '/' character).");
                return null;
            }
            if (cxn.username === null || cxn.username === "") {
                this.client.throwException("Required property op_username must be set to a valid OpenPages login user name.");
                return null;
            }
            if (cxn.password === null || cxn.password === "") {
                this.client.throwException("Required property op_conn_password must be set to the password for the specified OpenPages login (op_username) property.");
                return null;
            }
            // if (cxn.object === null || cxn.object === "") {
            //     this.client.throwException("Required property op_object must be set to a valid OpenPages object type.");
            //     return null;
            // }
            // Ensure that if the API root was not specified that the default is
            // used
            if (! cxn.root || cxn.root === "null" || cxn.root === "") {
                cxn.root = "/grc/api";
            }
            if (! cxn.url.endsWith(cxn.root)) {
                cxn.url += this.fixPath(cxn.root);
            }
        },
        initializeOPServerConnection : function() {
            var cxn = this.connectionProperties;
            var obj = cxn.object;
            cxn.objectId = null;
            if (obj !== null && typeof obj != 'undefined') {
                var thisType = this.getTypeByName(obj);
                if (thisType !== null) {
                    cxn.objectId = thisType.id;
                }
            }
            // Process the parent type and the parent location properties from the
            // properties file
            // to establish the default primary parent to use when the feed does not
            // provide a
            // static or dynamically derived primaryParentId
            this.validPrimaryParentIds = new java.util.HashSet();
            this.invalidPrimaryParentIds = new java.util.HashSet();
            // Obtain the default currency ISO code to use in case the feed does not
            // provide one
            // when a currency amount is included.
            this.defaultCurrencyIsoCode = this.getDefaultCurrencyIsoCode();
            // Obtain the registry setting for the Large String's maximum value
            this.largeStringMaxSize = this.getLargeStringMaxValue();
            // log the property values obtained from the various properties file(s)
            if (this.isDebug()) {
                this.client.logmsg("INFO",
                    "The OpenPages Connector configuration properties used for this instance are:" +
                    "\n\tURL (op_url):                          " +
                    cxn.url +
                    "\n\tUser Id (op_username):                 " +
                    cxn.username +
                    "\n\tGRC Object (op_object):                " +
                    cxn.object +
                    "\n\tQuery (op_query):                      " +
                    cxn.query +
                    "\n\tParent Object Type (op_parentType):    " +
                    cxn.parentType +
                    "\n\tParent Object Location (op_parentLoc): " +
                    cxn.parentLoc +
                    "\n\tDebug log (op_deBug):                  " +
                    cxn.deBug +
                    "\n\tURI Root (op_root):                    " +
                    cxn.root +
                    "\n\tSMTP Host (smtpHost):                  " +
                    this.mailer.smtpHost +
                    "\n\tSMTP Port (smtpPort):                  " +
                    this.mailer.smtpPort +
                    "\n\tMail To (mailTo):                      " +
                    this.mailer.mailTo + "\n");
            }
        },
        getDefaultPrimaryParentObjectId : function() {
            if (! this.defaultPrimaryParentObjectId) {
                var msg;
                var cxn = this.connectionProperties;
                if (this.getParentObjectType(cxn.parentType) !== null) {
                    this.defaultPrimaryParentObjectId = this.getParentObjectIdFromTypeAndLoc(cxn.parentType, this.parentLoc);
                    if (this.defaultPrimaryParentObjectId === null) {
                        msg = "The Parent Object Location property (op_parentLoc='" +
                            cxn.parentLoc +
                            "') from the properties file is not valid. Verify that op_parentType '" +
                            cxn.parentType +
                            "' is a legitimate parent type for object '" +
                            cxn.object +
                            "' and that the specified parent location is correct.";
                        this.client.logmsg("WARN", msg);
                        this.mailer.sendEmailNotification(msg);
                    }
                } else {
                    msg = "The Parent Type property (op_parentType='" +
                        cxn.parentType +
                        "') from the properties file is not valid.";
                    this.client.logmsg("WARN", msg);
                    this.mailer.sendEmailNotification(msg);
                }
                if (this.defaultPrimaryParentObjectId === null) {
                    msg = "The default primaryParentId derived from the Parent Type property " +
                        "(op_parentType) and the Parent Location property (op_parentLoc) " +
                        "from the properties file is not valid. " +
                        "Unable to establish a default primaryParentId for this assembly line run.";
                    this.client.logmsg("WARN", msg);
                    this.mailer.sendEmailNotification(msg);
                }
            }
            return this.defaultPrimaryParentObjectId === "not_found" ? null : this.defaultPrimaryParentObjectId;
        },
        fixPath : function (path) {
            if (! path.startsWith("/")) {
                path = "/" + path;
            }
            return path;
        },
        setCurrent : function (entry) {
            this.current = entry;
        },
        getObjectType : function (entryOrType) {
            if (typeof entryOrType === "undefined") {
                entryOrType = this.grcObjectType;
            }
            var objectType = null;
            if (entryOrType instanceof com.ibm.di.entry.Entry) {
                var typeAttVal = entry.getString("$grcObjectType");
                if (typeAttVal !== null) {
                    objectType = typeAttVal;
                }
                if (objectType === null) {
                    typeAttVal = entry.getString("typeDefinitionId");
                    if (typeAttVal !== null) {
                        objectType = this.getTypeById(typeAttVal);
                    }
                }
            } else {
                objectType = String(entryOrType);
            }
            if (objectType === null || objectType.trim().length === 0) {
                objectType = this.grcObjectType;
            }
            return objectType;
        },
        getGrcObjectType : function() {
            return this.grcObjectType;
        },
        getGrcObjectTypeId : function() {
            return this.grcObjectTypeId;
        },
        setGrcObjectType : function(grcObjectType) {
            this.grcObjectType = grcObjectType;
        },
        setGrcObjectTypeId : function(grcObjectTypeId) {
            this.grcObjectTypeId = grcObjectTypeId;
        },
        getCachedTemplate : function(objectType) {
            var key = objectType.trim().toLowerCase();
            return this.templates.get(key) || this.properties.get("OP_TMPL_" + key);
        },
        setCachedTemplate : function(objectType, template) {
            var key = objectType.trim().toLowerCase();
            this.templates[key] = template;
            this.properties.put("OP_TMPL_" + key, template);
        },
        getTemplate : function (entryOrType) {
            var templateObj = null;
            if (this.templates === null) {
                this.templates = new java.util.concurrent.ConcurrentHashMap();
            }
            var objectType = this.getObjectType(entryOrType);
            var objectDef = this.getTypeByName(objectType);
            var objectId = objectDef.id;
            var template = this.getCachedTemplate(objectType);
            if (! template) {
                template = new java.util.concurrent.ConcurrentHashMap();
                if (this.isDebug())
                    this.client.logmsg("DEBUG", "Retrieving template for " + objectType);
                try {
                    templateObj = this.client.makeRequest({
                        url : "/contents/template?typeId=" + objectId,
                        where : "this.getTemplate"
                    });
                } catch (ex) {
                    templateObj = null;
                    if (this.isDebug())
                        this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
                }
                if (templateObj === null || templateObj.length === 0) {
                    this.client.throwException(this.message["No template found for GRC object type"] +
                        ": " + objectType);
                    return null;
                }
                var fds = templateObj.fields.field;
                for (var i = 0; fds !== null && i < fds.length; i++) {
                    var fd = fds[i];
                    template.put(fd.name.trim().toLowerCase(), fd);
                }
                template.put("$grcObjectType", objectType);
                this.setCachedTemplate(objectType, template);
            }
            return template;
        },
        getFieldDefinition : function (objectType, fieldName) {
            if (!fieldName) {
                fieldName = objectType;
                objectType = this.grcObjectType;
            }
            var fieldDefs = this.getFieldDefinitions(objectType);
            return fieldDefs.get(fieldName.toLowerCase().trim());
        },
        getFieldDefinitions : function (entryOrType) {
            var schema = null;
            if (! entryOrType) {
                entryOrType = this.grcObjectType;
            }
            var objectType = this.getObjectType(entryOrType);
            var fieldDefs = this.getCachedFieldDefinition(objectType);
            if (! fieldDefs) {
                fieldDefs = new java.util.concurrent.ConcurrentHashMap();
                if (this.isDebug()) {
                    this.client.logmsg("DEBUG", "Retrieving field definitions for " + objectType);
                }
                try {
                    schema = this.client.makeRequest({
                        url : "/types/" + objectType,
                        where : "this.getFieldDefinitions"
                    });
                } catch (ex) {
                    schema = null;
                    if (this.isDebug())
                        this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
                }
                if (! schema || ! schema.fieldDefinitions) {
                    this.client.throwException(this.client.message["No field definitions returned for GRC object type"] +
                        ": " +
                        objectType +
                        "  RESPONSE: " +
                        toJson(schema) +
                        ". A valid op_object must be specified; aborting assembly line run.");
                    return null;
                }
                var fds = schema.fieldDefinitions.fieldDefinition;
                for (var i = 0; fds !== null && i < fds.length; i++) {
                    var fd = fds[i];
                    fieldDefs.put(fd.name.trim().toLowerCase(), fd);
                }
                fieldDefs.put("$grcObjectType", objectType);
                this.setCachedFieldDefinition(objectType, fieldDefs);
            }
            return fieldDefs;
        },
        getCachedFieldDefinition : function(objectType) {
            if (! this.fieldDefinitions) {
                this.fieldDefinitions = new java.util.concurrent.ConcurrentHashMap();
                return null;
            }
            var key = objectType.trim().toLowerCase();
            var fieldDefs = this.fieldDefinitions.get(key);
            return fieldDefs || this.properties.get("OP_FIELDDEF_" + key);
        },
        setCachedFieldDefinition : function(objectType, fieldDef) {
            var key = objectType.trim().toLowerCase();
            this.fieldDefinitions.put(key, fieldDef);
            this.properties.put("OP_FIELDDEF_" + key, fieldDef);
        },
        getTypeById : function (id) {
            var ids = this.getTypesById(id);
            return ids.get(id);
        },
        getTypeByName : function (type) {
           if(type == null || typeof type == "undefined")
           {
           	return null;
           }
            var types = this.getTypesByName(type);
            return types.get(type);
        },
        getTypesByName : function () {
            if (this.typesByName) {
                return this.typesByName;
            }
            this.getTypesById();
            return this.typesByName;
        },
        getCachedTypes : function() {
            if (! this.typesById) {
                this.typesById = this.properties.get("OPTypesByID");
                if (this.typesById) {
                    this.typesByName = this.properties.get("OPTypesByName");
                }
            }
            return this.typesById;
        },
        setCachedTypes : function(typesById, typesByName) {
            this.typesById = typesById;
            this.typesByName = typesByName;
            this.properties.put("OPTypesByID", typesById);
            this.properties.put("OPTypesByName", typesByName);
        },
        getTypeContents : function(typeId) {
            if (! this.contentsCache) {
                this.contentsCache = this.properties.get("OPContentsCache");
                if (! this.contentsCache) {
                    this.contentsCache = new java.util.concurrent.ConcurrentHashMap();
                    this.properties.put("OPContentsCache", this.contentsCache);
                }
            }
            var typeContents = this.contentsCache.get(typeId);
            if (typeContents) {
                return typeContents;
            }
            typeContents = this.client.getTypeContents(typeId);
            if (typeContents) {
                this.contentsCache.put(typeId, typeContents);
            }
            return typeContents;
        },
        getTypesById : function () {
            var reply = null;
            if (this.getCachedTypes()) {
                return this.typesById;
            }
            var typesById = new java.util.concurrent.ConcurrentHashMap();
            var typesByName = new java.util.concurrent.ConcurrentHashMap();
            try {
                reply = this.client.makeRequest({
                    "verb" : "GET",
                    "url" : "/types",
                    "ctype" : "application/json",
                    "where" : "OPClientState.getTypesById"
                });
            } catch (ex) {
                reply = null;
                if (this.isDebug())
                    this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
            }
            if (reply === null || typeof reply.length === "undefined" ||
                typeof reply.length == 0) {
                this.client.throwException(this.client.message["No types returned by OpenPages"] +
                    " RESPONSE: - " +
                    toJson(reply) +
                    ".\nEnsure that the OpenPages server is running and that the op_url, op_root, " +
                    "op_username and op_conn_password properties are valid.");
            }
            for (var i = 0; i < reply.length; i++) {
                typesById.put(reply[i].id, reply[i]);
                typesByName.put(reply[i].name, reply[i]);
            }
            this.setCachedTypes(typesById, typesByName);
            return this.typesById;
        },
        getCachedObjectDetails : function(objectType) {
            return this.typeDetailsByName && this.typeDetailsByName.get(objectType);
        },
        setCachedObjectDetails : function(objectType, details) {
            if (! this.typeDetailsByName) {
                this.typeDetailsByName = new java.util.concurrent.ConcurrentHashMap();
            }
            this.typeDetailsByName.put(objectType, details);
        },
        //
        // Perform a lookup of the specified parent object type to verify that it
        // exists.
        // Return the parent object type (as JSON), or null if the type does not
        // exist.
        //
        // @param - ptype - The parent object type name, eg "Submandate", "Mandate", "Requirement"
        //
        getParentObjectType : function (ptype) {
            if (! ptype || ptype === "") {
                this.client.logmsg("INFO", "No value specified for parent object type.");
                return null;
            }
            ptype = ptype.trim();
            var parentObjectTypeAsJson = this.getCachedObjectDetails(ptype);
            if (parentObjectTypeAsJson) {
                return parentObjectTypeAsJson;
            }
            if (this.isDebug())
                this.client.logmsg("DEBUG", "Retrieving definition for parent object type " + ptype);
            try {
                var reply = this.client.makeRequest({
                    url : "/types/" + ptype,
                    where : "this.getParentObjectType"
                });
                if (reply && reply.fieldDefinitions) {
                    parentObjectTypeAsJson = toJson(reply);
                    this.setCachedObjectDetails(ptype, parentObjectTypeAsJson);
                }
            } catch (ex) {
                this.client.logmsg("WARN",
                    "Non-fatal exception occurred while retrieving parent object type '" +
                    ptype +
                    "'; details:\n" +
                    ex);
            }
            return parentObjectTypeAsJson;
        },
        // Given the parent type, perform a lookup to verify that it exists. Return the
        // parent object Id, or null if it does not exist. This method assumes that the
        // ptype parameter has been validated by the getParentType() function.
        getParentObjectIdFromTypeAndLoc : function (ptype, ploc) {
            var reply = null;
            var parentObjectId = null;
            if (!ptype || ptype === "") {
                this.client.logmsg("INFO", "No value specified for parent object type.");
                return null;
            }
            if (!ploc || ploc === "") {
                this.client.logmsg("INFO", "No value specified for parent object location.");
                return null;
            }
            ptype = ptype.trim();
            ploc = ploc.trim();
            ploc = this.fixPath(ploc); // ensures that the location starts with a
            // '/'
            // Search for the parent object instance of the given ptype at the
            // specified location.
            // There should be one and only one match if the provided location is
            // correct.
            var queryUrl = "query?q=SELECT * FROM [" + ptype + "] WHERE [Location] LIKE '" + ploc + "'";
            if (this.isDebug())
                this.client.logmsg("DEBUG", "Retrieving parent object with relative location: " + ploc);
            try {
                reply = this.client.makeRequest({
                    url : queryUrl,
                    where : "this.getParentObjectIdFromTypeAndLoc"
                });
                if (reply !== null && typeof reply.rows !== "undefined" && reply.rows.length === 1) {
                    if (this.isPrimaryParentIdValid(reply.rows[0].fields.field[0].value)) {
                        parentObjectId = reply.rows[0].fields.field[0].value;
                    }
                }
            } catch (ex) {
                if (this.isDebug())
                    this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
            }
            return parentObjectId;
        },
        isPrimaryParentIdValid : function(id) {
            var isValid = false;
            var typeDefnId = null;
            if (this.isDebug()) {
                this.client.logDebug("Verifying that the specified parent id is valid: " + id);
            }
            if (! id || id === "" || this.isInvalidPrimaryParentId(id)) {
                return false;
            }
            if (this.isValidPrimaryParentId(id)) {
                return true;
            }
            try {
                system.toInt(id);
            } catch (e) {
                this.addInvalidPrimaryParentId(id);
                return false;
            }
            // The specified id is not yet known to the connector; try getting it to
            // ensure it exists
            var typeContents = this.getTypeContents(id);
            if (typeContents && typeof typeContents.id !== "undefined" && typeContents.id === id) {
                typeDefnId = typeContents.id;
                var objectParentAssociations = this.client.getObjectParentAssociations(this.getGrcObjectType());
                if (! objectParentAssociations || ! objectParentAssociations.length) {
                    isValid = false;
                } else {
                    // The entry with the matching id must have a relationship of "Parent"
                    for (var i = 0; i < objectParentAssociations.length; i++) {
                        var parentAssoc = objectParentAssociations[i];
                        if (parentAssoc.id === typeDefnId && parentAssoc.relationship.trim().toLowerCase() === "parent") {
                            isValid = true;
                            break;
                        }
                    }
                }
            }
            if (isValid) {
                this.addValidPrimaryParentId(id);
            } else {
                this.addInvalidPrimaryParentId(id);
            }
            return isValid;
        },
        getDefaultCurrencyIsoCode : function () {
            if (this.defaultCurrencyIsoCode) {
                return this.defaultCurrencyIsoCode;
            }
            var isoCode = this.properties.get("OPDefaultCurrencyIsoCode");
            if (isoCode) {
                this.defaultCurrencyIsoCode = isoCode;
                return isoCode;
            }
            var reply = null;
            isoCode = "USD";
            if (this.isDebug())
                this.client.logmsg("DEBUG", "Retrieving default (base) currency ISO code...");
            try {
                reply = this.client.makeRequest({
                    url : "/configuration/currencies/base",
                    where : "this.getDefaultCurrencyIsoCode"
                });
                if (reply !== null && reply.isoCode !== null) {
                    isoCode = reply.isoCode;
                }
            } catch (ex) {
                this.client.logmsg("WARN",
                    "Non-fatal exception occurred while retrieving base currency ISO code;" +
                    " using 'USD'. Exception details:\n" + ex);
            }
            this.defaultCurrencyIsoCode = isoCode;
            this.properties.put("OPDefaultCurrencyIsoCode", isoCode);
            return isoCode;
        },
        getLargeStringMaxValue : function () {
            if (this.largeStringMaxSize) {
                return this.largeStringMaxSize;
            }
            var largeStringMaxSize = this.properties.get("OPLargeStringMaxSize");
            if (largeStringMaxSize) {
                this.largeStringMaxSize = largeStringMaxSize;
                return largeStringMaxSize;
            }
            var reply = null;
            var doubleVal = 256000;
            if (this.isDebug()) {
                this.client.logmsg("DEBUG",
                    "Retrieving Large Text maximum value from OP registry...");
            }
            // do a GET of this:
            // "configuration/settings/%2FOpenPages%2FPlatform%2FRepository%2FResource%2FLarge
            // Text%2FMaximum Size"
            try {
                reply = this.client.makeRequest({
                    url : "configuration/settings/%2FOpenPages%2FPlatform%2FRepository%2FResource%2FLarge Text%2FMaximum Size",
                    where : "this.getLargeStringMaxValue"
                });
                if (reply !== null && reply.value !== null) {
                    largeStringMaxSize = reply.value;
                    try {
                        doubleVal = java.lang.Double.parseDouble(largeStringMaxSize);
                    } catch (ex) {
                        this.client.logmsg(
                            "WARN",
                            "Unable to convert Large String Maximum Value of (" +
                            largeStringMaxSize +
                            ") into a number; using hard-coded value of 256000.");
                        doubleVal = 256000;
                    }
                } else {
                    this.client.logmsg(
                        "WARN",
                        "No response on attempt to retrieve Large String Maximum Value registry setting;" +
                        " using hard-coded value of 256000.");
                }
            } catch (ex) {
                this.client.logmsg(
                    "WARN",
                    "Non-fatal exception occurred while retrieving Large String Maximum Value registry setting;" +
                    " using hard-coded value of 256000. Exception details:\n" +
                    ex);
            }
            this.largeStringMaxSize = doubleVal;
            this.properties.put("OPLargeStringMaxSize", doubleVal);
            return doubleVal;
        },
        isDebug : function() {
            return this.connectionProperties.deBug;
        },
        addInvalidPrimaryParentId : function(parentId) {
            this.invalidPrimaryParentIds.add(parentId);
        },
        isInvalidPrimaryParentId : function(parentId) {
            return this.invalidPrimaryParentIds.contains(parentId);
        },
        isValidPrimaryParentId : function(parentId) {
            return this.validPrimaryParentIds.contains(parentId);
        },
        addValidPrimaryParentId : function(parentId) {
            this.validPrimaryParentIds.add(parentId);
        },
        hasQuery : function() {
            return this.connectionProperties.query && this.connectionProperties.query.length;
        },
        getQuery : function() {
            return this.connectionProperties.query;
        }
    };
};]]></parameter>
    </Script>
</MetamergeConfig>