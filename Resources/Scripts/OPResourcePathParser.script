<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="3" UUID="dc98596e-a7f1-415f-b2f0-56e34cae67aa" created="Tue Aug 18 13:42:26 CEST 2020" createdBy="eddie" main="OPResourcePathParser" modified="Tue Feb 16 17:40:54 CET 2021" modifiedBy="edbir" project="POC_MVP" version="7.1.1">
    <Script name="OPResourcePathParser">
        <ModTime>1613493654334</ModTime>
        <parameter name="includeFiles"/>
        <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPResourcePathParser = function() {
    var globalSubstPattern = new RegExp("^\\$\\{(.+)\\}$");
    return {
        env : null,
        init : function(args) {
            if (args.env) {
                this.env = args.env;
            }
        },
        parsePath : function(path) {
            var parts = path.splitPolyfilled(/(\$\{.+\})/);
            var newPath = null;
            for (var i=0; i < parts.length; i++) {
                var part = parts[i];
                if (part && part.prototype === [].prototype && part.length > 0) {
                    //
                    // There is a bug in the String.splitPolyfilled function where the value can be assigned as
                    // an array of 1.  Extract the first array element until the problem can be fixed.  This checks
                    // here should prevent any runtime errors from occurring if the issue is fixed
                    //
                    part = part[0];
                }
                if (! newPath) {
                    newPath = "";
                }
                
                newPath += this.substituteWorkValue(part);
            }
            return newPath ? newPath : path;
        },
        substituteWorkValue : function(value) {
            if (typeof value === "undefined" || value === null) {
                return value;
            }
            //
            // Is the value a candidate for global substition?
            //
            var subMatch = globalSubstPattern.exec(value);
            if (! subMatch || ! subMatch.length > 1) {
                return value;
            }
            //
            // Get the variable name inside the brackets
            //
            value = subMatch[1];
            if (! value) {
                return value;
            }
            var parts = value.split("=");
            value = parts[0];
            if (this.env && this.env["get"] && typeof this.env["get"] === "function") {
                var subbedValue = this.env.get(value);
                if (typeof subbedValue !== "undefined") {
                    return subbedValue;
                }
            }
            return parts.length > 1 ? parts[1] : null;
        }
    }
};]]></parameter>
    </Script>
</MetamergeConfig>