<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="2" UUID="f0d23517-53a4-4a07-9d03-a9446b4c62b0" created="Tue Aug 18 13:41:22 CEST 2020" createdBy="eddie" main="OPResultSet" modified="Tue Aug 18 13:41:36 CEST 2020" modifiedBy="eddie" project="POC_MVP" version="7.1.1">
    <Script name="OPResultSet">
        <ModTime>1597750895773</ModTime>
        <parameter name="includeFiles"/>
        <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPResultSet = function() {
    return {
        set : null,
        index : 0,
        nextUrl : null,
        objectType : null,
        client : null,
        initialize : function(args) {
            this.set = [];
            this.client = args.client;
            return this;
        },
        add : function(jobj) {
            this.set.push(jobj);
        },
        size : function() {
            return this.set.length;
        },
        clear : function() {
            this.set = [];
            this.index = 0;
        },
        hasNext : function() {
            return (this.set !== null && (this.index < this.set.length || this.nextUrl !== null));
        },
        next : function() {
            if (! this.set) {
                return null;
            } else {
                // if no results AND no next link, end of list
                if (this.index >= this.set.length && this.nextUrl === null) {
                    return null;
                }
                // else if no results but have next link, get result set
                else if (this.index >= this.set.length && this.nextUrl !== null) {
                    this.getResultSet({
                        url : "/" + this.nextUrl
                    });
                }
                // return next entry
                return this.client.grcObjectToEntry(this.set[this.index++]);
            }
        },
        getResultSet : function(args) {
            var verb = args.verb || "GET";  // HTTP method, e.g. GET, POST, PUT, ...
            var url = args.url || "";       // url for the request. May be partial (only the
            // path & query string params)
            // var body = args.body;           // HTTP body to be passed for the request
            var ctype = args.ctype || "application/json;charset=utf-8"; // Content-Type of the HTTP body
            var where = args.where || "";   // where this method is called from - for
            // debugging purposes
            var reply = null;
            this.clear();
            if (this.client.state.isDebug())
                this.client.logmsg("DEBUG", "Issuing " + verb + " request to URL: " + url);
            try {
                reply = this.client.makeRequest({
                    verb : verb,
                    url : url,
                    ctype : ctype,
                    where : where + "resultSet.getResultSet"
                });
            } catch (ex) {
                reply = null;
                this.client.logmsg(
                    "WARN",
                    "Exception occurred while processing result set from REST request to OpenPages; continuing...");
                if (this.client.state.isDebug())
                    this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
            }
            if (reply !== null) {
                var i;
                if (typeof reply.rows !== "undefined") {
                    var rows = reply.rows;
                    for (i = 0; i < rows.length; i++) {
                        this.add(rows[i]);
                    }
                } else {
                    this.add(reply);
                }
                // check for next link
                if (typeof reply.links !== "undefined") {
                    this.nextUrl = null;
                    for (i = 0; i < reply.links.length; i++) {
                        if (reply.links[i].rel == "next") {
                            this.nextUrl = reply.links[i].href;
                        }
                    }
                }
            }
        }
    };
};
//noinspection JSAnnotator
return OPResultSet;]]></parameter>
    </Script>
</MetamergeConfig>