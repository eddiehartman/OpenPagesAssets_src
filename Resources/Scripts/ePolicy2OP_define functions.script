<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="126" UUID="bfb43c67-a0d0-464d-86b2-288b6508937c" created="Thu Oct 01 13:31:55 CEST 2020" createdBy="eddie" main="ePolicy2OP_define functions" modified="Tue Feb 16 17:40:42 CET 2021" modifiedBy="edbir" project="POC_MVP" version="7.1.1">
    <Script name="ePolicy2OP_define functions">
        <ModTime>1613493642338</ModTime>
        <parameter name="includeFiles"/>
        <parameter name="script"><![CDATA[policyStatii = [{
	name: "Retired"
},
{
	name: "New",
	action: "Generate Policy"
},
{
	name: "Draft",
	action: "Submit Draft Policy"
},
{
	name: "Control Review",
	action: "Submit for Clause Review"
},
{
	name: "Clause Review",
	action: "Submit for Quality Review"
},
{
	name: "In Review",
	action: "Reviewed"
},
{
	name: "DPE Approval",
	action: "Approve" // must be DPE
},
{
	name: "Client Approval"
},
{
	name: "Production"
}];

function listOfActions(startingStatus, targetStatus) {
	var actions = [];
	
	var foundStart = false;
	for (var i = 0; i < policyStatii.length; i++) {
		var thisStatus = policyStatii[i];
		foundStart = foundStart || startingStatus == thisStatus.name;
		if (foundStart) {
			if (thisStatus.action) {
				var step = {
					action: thisStatus.action,
					resultingStatus: policyStatii[i+1].name
				}
				actions.push(step);
			}
		}
		
		if (targetStatus == thisStatus.name) {
			break;
		}
	}
	
	return actions;
}

var statusReportMap = null;

// Read the version number from the CSD doc using the original method
function readVersion(versionSubversion, bytesarr) {
	// Tried to read the doc to parse out the version number
	try {
		var fis = new java.io.ByteArrayInputStream(bytesarr);
		var document = new org.apache.poi.xwpf.usermodel.XWPFDocument(org.apache.poi.openxml4j.opc.OPCPackage.open(fis));					// ***********************
		var tables = document.getTables();
		
		for (var table in tables) {
			var paraStr = table.getText();
	
			if (paraStr.toLowerCase().contains(versionSubversion.policy.match)) {
				var lines = system.splitString(paraStr, "\n");
				for (var line in lines) {
					for (var type in versionSubversion) {
						var p = line.toLowerCase().indexOf(versionSubversion[type].match);
						if (p >= 0) {
							versionSubversion[type].value = line.substring(p + versionSubversion[type].match.length).trim()
									.replace("Version", "")
									.replace("version", "")
									.replace("V", "")
									.replace("v", "");
						}	
					}	
				}
			}	
		}
	} catch (ex) {
		msg = "Unable to read version from CSD Document: " + csdDoc.Name;
		log("WARN", msg + " - " + ex);
	}
	
	fis.close();
	
	return versionSubversion;
}

// Try scanning for the version by grabbing the tables, starting with the last one
// and parsing using regex to find 'n.n[.n]'
function findVersion(versionSubversion, bytesarr) {
	try {
		var foundVersion = [];
		var fis = new java.io.ByteArrayInputStream(bytesarr);
		var document = new org.apache.poi.xwpf.usermodel.XWPFDocument(org.apache.poi.openxml4j.opc.OPCPackage.open(fis));

		var tables = document.getTables();
		var paras = [];
		var foundIt = false;
		
		for (var tableCnt = tables.size()-1; tableCnt >= 0 && !foundIt; tableCnt--) {
			var table = tables.get(tableCnt);
			var tableStr = table.getText();
			var found = tableStr.match("\\s*([\\dxX]{1,2}\\.[\\dxX]{1,3}(\\.[\\dxX]{1,3})?)");
			if (found != null) {
				log("DEBUG", "  ----->  found version: " + found[1] + " in '" + tableStr + "'");
				versionSubversion.policy.value = found[1];
				break;
			}
		}
	} catch (ex) {
		msg = "Unable to find version in CSD Document: " + csdDoc.Name + ". ";
		log("WARN", msg + " - " + ex);
	}

	fis.close();
	
	return versionSubversion;
}

// Grabs the version number at the end of the passed string
function getVersionFromName(str) {
	str = str || "";
	var vers = str.match();
	if (vers == null) {
		return "?"
	} else {
		return vers[1];
	}
}

// Split up a version text, compare it with the current value and return the greatest version
function latestVersion(thisVersion, currentVersion) {
	var thisRank = !thisVersion ? "0.0" : (thisVersion.toLowerCase().startsWith("x") ? "0.1" : thisVersion);
	var currentRank = (!currentVersion || String(currentVersion).trim().startsWith("?")) ? "0.0" : (currentVersion.toLowerCase().startsWith("x") ? "0.1" : currentVersion);
	if (thisRank > currentRank) {
		return thisVersion;
	} else {
		return currentVersion;
	}
}

function saveCreationDetails(account, type, entries, addToArray) {
	addToArray = addToArray || [];
	CSD = CSD || system.newEntry();
	if (!(entries instanceof Array)) {
		entries = [entries];
	}

	// Add to array of created objects and count
	var savedObj = {
		type: type,
		name: entries[0].getString("Name"),
		id: entries[0].getString("Resource ID"),
		children: []
	};
	
	addToArray.push(savedObj);

	//if (typeof _counter[account] == "undefined") {
	//	_counter[account] = {};
	//}
	
	//_counters[account][type] = (_counters[account][type] || 0) + 1;

	_counters[type] = (_counters[type] || 0) + 1;
	
	if (type == "Policy") {
		// This next should be like this: CSD-{ePolicy_Account_Name}-v{epolicy_policy_version}
		if (!statusReportMap) {
			statusReportMap = new Mapper("POC_MVP/map_statusreportpolicy.map");
		}
		var mappedEntry = statusReportMap.map(entries);
		var csdAndPolicyLine = mappedEntry.getString("status_line");
		//var policyName = mappedEntry.getString("policy_name")
		_counters["Policy_Names"] = _counters["Policy_Names"] || []; // Adding "_Names" to type to ref the property
		_counters["Policy_Names"].push(csdAndPolicyLine);
	}
	
	work._metrics = {
		accountName: accountName,
		timer: timer,
		counters: _counters,
		errors: _errors,
		warnings: _warnings
	}	
	
	return savedObj.children;
}

function mapStatus(status, forWhat) {
	forWhat = forWhat || "";
	status = status || null;
	
	if (status instanceof com.ibm.di.entry.Attribute) {
		status = status.getValue();
	}
	
	if (status == null) {
		return null;
	}
	
	switch (status.toLowerCase()) {
		case "ibm_approved": return "Client Approval";
		case "draft": return "Draft";
		case "in_review": return "In Progress";
		case "ibm_approval_pending": return "DPE Approval";
		case "customer_approved": return "Published";
		case "production": return "Published";
		case "obsolete": return "Retired";
		default: 
			var errmsg = (forWhat == "" ? "" : forWhat + " - ") + "Cannot convert status: " + status;
			log("ERROR", errmsg);
			throw errmsg;
	}
}

function mapColumn(value1, value2, value3) {
	var useValue = value1 || value2 || value3 || "NA";
	if (useValue instanceof com.ibm.di.entry.Attribute) {
		useValue = useValue.getValue();
	}
	switch (useValue) {
		case "N/A": return "NA";
		case "P":
		case "A": return useValue;
		default: return "NA";
	}
}

function mapFunction(value){
	value = value || "NA";
	if (value instanceof com.ibm.di.entry.Attribute) {
		value = useValue.getValue();
	}
	switch (value){
		case "I": return "Insert";
		case "U": return "Update";	
		case "D": return "Delete";
		 default: return "NA";		
		
	}
	
}

// Removes semicolon from the start the string - used in function below it
function cleanEmail(email) {
	email = (email || "").trim();
	if (email.startsWith(";")) {
		email = email.substring(1);
	}
	return email.trim();
}

// Try to match up the DPE in the ePolicy CSD with the DPEs for this OpenPages Account
// If no match is found, take the first of the OpenPages DPEs.
// The OpenPages Account DPEs field looks like this:
//    "$;blade@us.ibm.com$;jmmathis@us.ibm.com$;"
function selectDPE(opDPE, epDPE) {
	var opDPE = (opDPE || "").trim();
	var epDPE = (epDPE || "").trim();
	var parts = system.splitString(opDPE, "$");
	opDPE = cleanEmail(parts[0]);

	if (parts.length >= 2) {
		for (var i = 0; i < parts.length; i++) {
			var cleaned = cleanEmail(parts[i]);
			if (cleaned != "") {
				opDPE = cleaned;
				if (opDPE.equalsIgnoreCase(epDPE)) {
					return opDPE;
				}
			}
		}
	} else {
		return cleanEmail(part[0])
	}

	return cleanEmail(opDPE);
}]]></parameter>
    </Script>
</MetamergeConfig>