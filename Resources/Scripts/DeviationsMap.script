<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="1008" UUID="7af64e89-95fd-404f-bc07-1920d12e860e" created="Wed Sep 23 14:20:42 CEST 2020" createdBy="eddie" main="DeviationsMap" modified="Tue Feb 16 17:40:54 CET 2021" modifiedBy="edbir" project="POC_MVP" version="7.1.1">
    <Script name="DeviationsMap">
        <ModTime>1613493654941</ModTime>
        <parameter name="includeFiles"/>
        <parameter name="script"><![CDATA[// DeviationMap is used to read in Clause Controls and compare with those in OpenPages, generating a HashMap with details
// about differences.
//
// The argument 'args' can hold the following properties:
//		- op - an initialized OpenPagesObj
//		- db - an initialized ePolicyObj
//		- id - (optional) the id of the Policy the deviation Map should be based on
//				if not passed, the deviation Map will be between ePolicy and the Policy Template info in OpenPages
//
var DeviationMap = function(args) {
//	this.vrs = "20200924 1249"; // Initial version
//	this.vrs = "20200928 1322"; // Fixed error in switching Ref columns for missing records - thanks to Blade
//	this.vrs = "20200929 1316"; // Added mapOfUpdates() method for updating CCs in OpenPages
//	this.vrs = "20201001 1508"; // Added name & id property to object in ccMap, devMap and return of mapOfUpdates() + duplicate ref handling + getCCType() function added
//	this.vrs = "20201005 1328"; // Stopped turning null values into 'null' string value
//	this.vrs = "20201006 1313"; // Improved cxhange storage (devMap)
//	this.vrs = "20201008 1502"; // Fixed to track all Clauses read for a Policy, including those with no changes to Clause Controls
//	this.vrs = "20201015 1345"; // Changed dev tracking to compare mapped ePolicy value (col3 & 4) with that of OpenPages
//	this.vrs = "20201015 1639"; // Fixed getCCType()
//	this.vrs = "20201019 1507"; // Change diff calculation to never update Col3 or Col4 from Template, but only from ePolicy, otherwise NA
//	this.vrs = "20201028 1317"; // Updated Migration Log column headers, as well as diff calculation logic
//	this.vrs = "20201031 1509"; // Corrected dev generation after introducing new mapping rules and workbook column header order
//	this.vrs = "20201105 1119"; // Fixed handling of Clause Controls with feedback from Blade	
//	this.vrs = "20201110 1258"; // Corrected R&R Col3 and Col4 to show mapped value in Migration Log
//	this.vrs = "20201110 1941"; // Removing rows from Migration Log workbook if no Condition set
//	this.vrs = "20201111 1102"; // Ensuring for RR types that if ePolicy CC is not found, values are NA for col3 and col4
//	this.vrs = "20201111 1152"; // Converting back bullet symbol from whatever UTF-8 encoding changes it to (REST call from OP)
//	this.vrs = "20201111 1258"; // Walked back previous change since OpenPages Connector now uses UTF-8 encoding
//	this.vrs = "20201124 1452"; // Added No Change entries to MigrationLog
//	this.vrs = "20201201 1346"; // Stopped doing mapping/control of ePolicy values
//	this.vrs = "20201214 2022"; // Corrected some local variable use in for-loops
//	this.vrs = "20201217 1406"; // Fixed a bug where epValue was being set from opObj
//	this.vrs = "20201217 1523"; // Affixed the New Rule for CC mapping EVERYWHERE now
//	this.vrs = "20201217 1650"; // Corrected Migration Log by replacing all whitespace and lowercasing before checking differences
//	this.vrs = "20201217 1726"; // Fixed replaceAll which needed backslash escaped
	this.vrs = "20201217 2034"; // Correctly comparing columns for Migration Log by removing newlines
	
	this.op = args.op || null;
	this.db = args.db || null;
	this.id = args.id || null;
	this.mappingTable = args.mappingTable || {};
	
	// Local properties
	this.opRefIndex = 0;
	this.epRefIndex = 1;
	this.ccTypes = {
		RV: {
			name: "Recommended Values",
			fieldNames: ["ePolicy Reference", // col1
						"OpenPages Reference",
						"Condition", 
						"ePolicy Agreed To Requirement", // col2
						"OpenPages Agreed To Requirement", 
						"ePolicy IBM Recommended Value", // col3
						"OpenPages IBM Recommended Value", 
						"ePolicy Customer Value", // col4
						"Migrated Customer Value" ],
			attributeNames: {},
			map: ["epObj.ref",
					"opObj.ref",
					"condition",
					"epObj.col2",
					"opObj.col2",
					"epObj.col3",
					"opObj.col3",
					"epObj.col4",
					"opObj.col4"],
			checkFields: [3,4,5,6,7,8]
		},
		RR: {
			name: "Roles & Responsibilities",
			fieldNames: ["ePolicy Reference", // col1
						"OpenPages Reference", 
						"Condition", 
						"ePolicy Base R&R", // col2
						"OpenPages Base R&R", 
						"ePolicy IBM R&R", // col3
						"Migrated IBM R&R",
						"ePolicy Customer R&R", // col4
						"Migrated Customer R&R"],
			attributeNames: {},
			map: ["epObj.ref",
					"opObj.ref",
					"condition",
					"epObj.col2",
					"opObj.col2",
					"epObj.col3",
					"opObj.col3",
					"epObj.col4",
					"opObj.col4"],
			checkFields: [3,4,5,6,7,8]
		}
	};
	
	this.epMap = {};
	this.epList = {};
	this.opMap = {};
	this.opClauseMap = new java.util.HashMap();
	this.opList = {};
	this.opCCTypeCount = {};
	this.devMap = null;
	this.workbook = null;
	this.devMap = {};
	this.diffs = {}; // For storing the difference between ePolicy and OpenPages for col3 and col4
	
	// Local log function
	this.log = function(lvl, msg, throwit) {
		throwit = throwit || false;
		
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[DeviationMap] " + msg);
		
		if (throwit) throw "[DeviationMap] " + msg;
	}

	// Initialization method
	this.initialize = function() {
		this.log("v" + this.vrs);
		this.gatherControlClausesFromEPolicy();
		this.gatherControlClausesFromOpenPages();
		
		
		for (var ccType in this.ccTypes) {
			var fieldNames = this.ccTypes[ccType].fieldNames;
			var cnt = 1;
			for (var fld = 1; fld < fieldNames.length; fld++) {
				this.ccTypes[ccType].attributeNames[fieldNames[fld]] = "GTS-ClauseCtl:Col" + cnt++;
			}
		}
	} 
		
	// Collects Clause Controls from ePolicy
	this.gatherControlClausesFromEPolicy = function() {
		this.log("Gathering Clause Controls from ePolicy...");
		
		// Read Clause controls from epolicy for each type, RR and RV
		for (var ccType in this.ccTypes) {
			this.epList[ccType] = db.query("control_clause_" + ccType.toLowerCase(), CSD);
			this.epMap[ccType] = this.extractLatestClauseControlsForEPolicy(this.epList[ccType], ccType);
			
			this.log("Read " + this.epMap[ccType].size() + " " + this.ccTypes[ccType].name + " Clause Controls from ePolicy");
		}
	}	
	
	this.showJson = function(name, obj) {
		var props = new java.util.ArrayList();
		
		log(">> " + name);
		
		if (!obj) {
			log("    * undefined *");
			return;
		}
		
		for (var p in obj) {
			props.add(p)
		};
		var propList = props.toArray();
		java.util.Arrays.sort(propList);
		for (var prop in propList) {
			log( "   " + prop + ": " + obj[prop]);
		}
	}
	
	// Test the devObj
	this.lastRef = "";
	this.showDevObj = function(ref, devObj, epObj, opObj) {
		var err = "";
		
		this.log("-----------------------------------------");
		if (ref != this.lastRef) {
			log("=============== " + ref);
			this.lastRef = ref;
		}
		this.showJson("devObj", devObj);
		this.showJson("epObj", epObj);
		this.showJson("opObj", opObj);
		
		if (ref == "CL02-ST-CBR001") {
			err = "F R&R"
		} else 
		if (ref == "CL07-HR-RV001") {
			err = "H RV"
		} else
		if (ref == "CL08-MH-BRR005") {
			err = "cites erroneous text Please list them..."
		} else
		if (ref == "CL11-IC-BRR001") {
			err = "match with ePolicy, but listed as changes";
		} else
		if (ref == "CCL12-LA-BRR002") {
			err = "Col2 does not match ePolicy";
		} 
	}

	// Determine the type of the Control Clause based on the Entry or the Ref
	this.getCCType = function(args) {
		args = args || "";
		
		if (args instanceof com.ibm.di.entry.Entry) {
			var tableType = args.getString("GTS-ClauseCtl:Table Type");
			if (tableType) {
				return tableType;
			} else {
				args = args.getString("GTS-ClauseCtl:Col1")
			}
		} 
		
		var opEntry = this.opMap.RR.get(args);
		if (opEntry) {
			return "RR";
		}
		opEntry = this.opMap.RV.get(args);
		if (opEntry) {
			return "RV";
		}
		return null;
	}

	// Collects Clause Controls from OpenPages
	this.gatherControlClausesFromOpenPages = function(id) {
		id = id || this.id;
		var duplicates = {};
		
		this.log("Gathering Clause Controls from OpenPages...");

		// Find all Control Clauses for the Policy with Resource ID equal to the value of the 'id' argument
		var clauses = this.op.findChildren("Policy", id, "Procedure");
		
		timer.start("Collection Clause Controls from OpenPages");
		var start = java.lang.System.currentTimeMillis();
		
		for (var ccType in this.ccTypes) {
			this.opMap[ccType] = new java.util.HashMap();
			this.opCCTypeCount[ccType] = 0;
		}
		
		for (var clause in clauses) {
			var ccid = clause.getObject("Resource ID");
			var clauseName = clause.getString("Name");
			
			var clauseObj = {
				id: clause.getString("Resource ID"),
				name: clause.getString("Name"),
				desc: clause.getString("Description")
			};
			
			this.opClauseMap.put(clauseName, clauseObj);
			
			//log("Found: " + toJson(clauseObj));
			
			var controls = this.op.findChildren("Procedure", ccid, "GTSClauseCtl");
			for (var control in controls) {
				var ref = control.getString("GTS-ClauseCtl:Col1");
				var ccType = this.getCCType(control);
				var ccObj = {
					ref: ref,
					id: control.getString("Resource ID"),
					type: ccType,
					name: control.getString("Name"),
					col2: control.getString("GTS-ClauseCtl:Col2") || "",
					col3: control.getString("GTS-ClauseCtl:Col3")|| "",
					col4: control.getString("GTS-ClauseCtl:Col4") || "",
					location: control.getString("Location") || ""
				}
/*				
				if (ccObj.ref == "CL14-SD-CBR001") {
					log("Got it: " + toJson(ccObj) + "\n" + control);
				}
*/				

				var previouslyAdded = this.opMap[ccType].get(ccObj.ref);
				if (previouslyAdded != null) {
					if (!duplicates[ccObj.ref]) {
						duplicates[ccObj.ref] = [previouslyAdded.location];
					}
					duplicates[ccObj.ref].push(control.getString("Location"));
					//duplicates.push(ccObj.ref);
				}

				this.opMap[ccType].put(ccObj.ref, ccObj);
				this.opCCTypeCount[ccType]++;
			}
		}

		for (var ccType in this.ccTypes) {
			this.log("Read " + this.opCCTypeCount[ccType] + " " + this.ccTypes[ccType].name + " Clause Controls from OpenPages");
		}	

		var dups = [];
		for (var ref in duplicates) {
			dups.push("(REF: " + ref + ")<br/>\n" + duplicates[ref].join(" <br/>\n"));
		}		
		if (dups.length > 0) {
			this.log("ERROR", "Found multiple Template Clause Controls with the same REF): <br/>\n" + dups.join(" | <br/>\n"), true);
		}
		
		timer.stop("Collection Clause Controls from OpenPages");
		var end = java.lang.System.currentTimeMillis();
		log("\n\nTotal time to collect CCs from OpenPages: " + (end-start)/1000 + " seconds");
	}
	
	// Populate a new HashMap with only the latest Control Clauses
	this.extractLatestClauseControlsForEPolicy = function(ccList, ccType) {
		var addToMap = new java.util.HashMap();
		
		for (var cc in ccList) {
			var ref = cc.getString("REF");

			var prevRef = addToMap.get(ref);
			if (prevRef != null) {
				var thisRev = cc.getObject("REVISION");
				if (thisRev < prevRef.rev) {
					this.log("Skipping " + ref + " with revision: " + thisRev);
					continue;
				}
				var thisTS = cc.getObject("UPDATED_TS");
				if (thisTS < prevRef.ts) {
					this.log("Skipping " + ref + " with updated_ds: " + thisTS);
					continue;
				}
				addToMap.remove(ref);
			}
			var ccObj = {
				ref: ref,
				type: ccType,
				col2: cc.getString("BASE_RR") || cc.getString("REQUIREMENT") || "",
				col3: cc.getString("IBM") || cc.getString("REC_VALUE") || "",
				col4: cc.getString("CUST_XYZ") || ""
			};
/*
			// For RR types, apply map to Col 3 and Col 4 ("IBM" and "CUST_XYZ" fields from ePolicy)
			if (ccType == "RR") {
				ccObj.col3 = mapColumn(ccObj.col3);
			}
			ccObj.col4 = mapColumn(ccObj.col4);
*/			
			addToMap.put(ref, ccObj);
		}
	
		for (var ref in addToMap) {
			var ccObj = addToMap[ref];
		}
	
		return addToMap;
	}	

	// Generate the deviation map (this.devMap)
	// A deviation is one of the followingg
	//		- a CC in OpenPages is missing from ePolicy
	//		- a CC in ePolicy is missing from OpenPages
	//		- There is a difference between the values of specific fields in ePolicy and OpenPages
	//		- Values for Col 3 (for RR types) and Col 4 (for both) are not value. Must be P, A or NA.
	//		- Values for Col 3 and Col 4 for RV types both must be P, A or NA
	this.generateDeviationMap = function() {

		this.log("Detecting differences...");

		this.devMap = {
			RR: new java.util.HashMap(),
			RV: new java.util.HashMap()
		};
		
		this.clauseChanges = {
			RR: 0,
			RV: 0
		}
		
		var changeCnt = 0;
		
		for (var ccType in this.ccTypes) {
			// Note all CCs found in ePolicy, but not in OpenPages
			var epArray = this.epMap[ccType].keySet().toArray();
			java.util.Arrays.sort(epArray);
			for (var ref in epArray) {
				var epRef = ref;
				var opObj = this.opMap[ccType].get(ref);
				var epObj = this.epMap[ccType].get(ref);
				var devObj = null;

				var mappedRef = this.mappingTable[ref];
				if (mappedRef) {
					//epRef = mappedRef;
					opObj = opMap.get(epRef);
				}

				//epObj.ref = epRef; // Save the mapped ref (in case it was mapped in the above if-statement) in the epObj
				
				// Check if missing in OpenPages
				if (opObj == null) {
					var devObj = devObj || {ref: ref};
					devObj.Condition = "Missing in OpenPages";
					opObj = {};

					// If not found in OpenPages, include the check-fields from ePolicy for the Migration Log
					for (var i = 0; i < this.ccTypes[ccType].checkFields.length; i++) {
						var checkThisField = this.ccTypes[ccType].checkFields[i];
						var opValue = (eval(this.ccTypes[ccType].map[checkThisField]) || "");
						devObj[this.ccTypes[ccType].fieldNames[checkThisField]] = opValue || "";
						devObj[this.ccTypes[ccType].fieldNames[checkThisField] + 1] = ""; // Set the OpenPages field to blank
						i++;
					}

					this.devMap[ccType].put(ref, devObj);
				}
			}
			
			// Now look for all CCs found in OpenPages, discovering those missing in ePolicy, as well as differences in data
			// Mark differences as Updates for Openpages
			var keys = this.opMap[ccType].keySet().toArray();
			java.util.Arrays.sort(keys);
			
			for (var ref in keys) {
				var epObj = this.epMap[ccType].get(ref);
				var opObj = this.opMap[ccType].get(ref);
				var devObj = this.devMap[ccType].get(ref) || {ref: ref, update: true}; // DEFAULT update is true to catch No Changes
				var conditions = [];

				// If not found in ePolicy, then signal this in the deviation object (devObj)
				if (epObj == null) {
					//devObj = devObj || {ref: ref};
					conditions.push("Missing in ePolicy");

					for (var i = 0; i < this.ccTypes[ccType].checkFields.length; i++) {
						// If not found in ePolicy, include the check-fields from OpenPages for the Migration Log
						var checkThisField = this.ccTypes[ccType].checkFields[i];
						var opValue = (eval(this.ccTypes[ccType].map[checkThisField + 1]) || "");
						devObj[this.ccTypes[ccType].fieldNames[checkThisField]] = ""; // set the ePolicy field to blank
						devObj[this.ccTypes[ccType].fieldNames[checkThisField + 1]] = opValue; // set OP field to value
						i++;
					}
				} 
				
				// See if OpenPages CCs have invalid values for column 3 (for type RR) or column 4 (both)
				// For RV types both col 3 from OP and col 4 from ePolicy as-is
				var checkFields = { 
					col3: 6,
					col4: 8
				};
				
				// Check Col3 and Col4
				for (var field in checkFields) {
					var opValue = (String(opObj[field]) || "");
					var epValue = (epObj) ? String(epObj[field]) : "";
					
					var mappedValue = epValue;
					if (ccType == "RV" && field == "col3") {
						mappedValue = opValue;
					}

					// Mark changed fields with the pipe prefix (|)
					mappedValue = String(mappedValue);
					var changePrefix = "";
					if (opValue != mappedValue) {
						//devObj = devObj || {ref: ref};
						devObj["GTS-ClauseCtl:" + field] = mappedValue;
						devObj.update = true;
						this.clauseChanges[ccType]++;
					}

					var epValueNormalized = epValue.trim().toLowerCase().replaceAll("\\s+", "");
					var mappedValueNormalized = mappedValue.trim().toLowerCase().replaceAll("\\s+", "");
					if (epValueNormalized != mappedValueNormalized) {
						//devObj = devObj || {ref: ref};		
						changePrefix = "|";
						if (conditions.length == 0 || conditions[conditions.length-1] != "Clause Control Change") {
							conditions.push("Clause Control Change");
						}	
					}

					// If a devObj has been created, be sure and set the values for both ePolicy and OpenPages/Migrated columns
					// Set fields for the Migration Log
					devObj[changePrefix + this.ccTypes[ccType].fieldNames[checkFields[field]]] = mappedValue; // OP/Migrated value
					//devObj[changePrefix + this.ccTypes[ccType].fieldNames[checkFields[field]]] = opValue;
					devObj[changePrefix + this.ccTypes[ccType].fieldNames[checkFields[field]-1]] = epValue; // ePolicy value
				}

				// Look for differences in the Col2 field to check for both CC types
				if (opObj && epObj) {
//					for (var i = 0; i < this.ccTypes[ccType].checkFields.length; i++) {
					for (var i = 0; i < 2; i++) {
						var fieldIndex = this.ccTypes[ccType].checkFields[i];
						
						// Get which fields to compare based on the index into the checkFields list
						var epValue = (eval(this.ccTypes[ccType].map[fieldIndex]) || "");
						var epValueFixed = epValue.trim().toLowerCase().replaceAll("\\s+", "");
						var opValue = (eval(this.ccTypes[ccType].map[fieldIndex + 1]) || "");
						var opValueFixed = opValue.trim().toLowerCase().replaceAll("\\s+", "");
	
						// If a change was detected, record it in the deviation object
						var changePrefix = "";
						if (opValueFixed != epValueFixed) {
							devObj = devObj || {ref: ref};
							if (conditions.length == 0 || conditions[conditions.length-1] != "Clause Control Change") {
								conditions.push("Clause Control Change");
							}
							changePrefix = "|"
						}
						
						devObj[changePrefix + this.ccTypes[ccType].fieldNames[fieldIndex]] = epValue; // First is ePolicy field
						devObj[changePrefix + this.ccTypes[ccType].fieldNames[fieldIndex + 1]] = opValue; // Then OP field

						i++; // Skip the next field, since it was compared with this one.
					}
				}
				
				if (opObj != null) {
					// Add the RESOURCE ID and NAME to accomodate updating the CC in OpenPages in a later step
					devObj.id = opObj.id;
					devObj.name = opObj.name;
				}

				var oldDevObj = this.devMap[ccType].get(ref);
				if (oldDevObj) {
					this.log("WARN", "Found multiple instances of Clause Controls with REF: " + ref);
					// Move old changes to those newly detected
					for (var pname in oldDevObj) {
						devObj[pname] = oldDevObj[pname];
					}

					this.devMap[ccType].remove(ref);
				}

				devObj.Condition = conditions.join("\n");
				//this.showDevObj(ref, devObj, (epObj ? epObj : null), opObj);

				if (devObj.update) {
					// If no changes found, capture the No Changes condition
					if (!devObj.Condition) {
						devObj.Condition = "No changes";
						
						// Capture col3 and col4 from OpenPages
						for (var field in checkFields) {
							var opValue = (String(opObj[field]) || "");
							var epValue = (String(epObj[field]) || "");

							var mappedValue = epValue;
							if (ccType == "RV" && field == "col3") {
								mappedValue = opValue;
							}							

							if (typeof devObj["GTS-ClauseCtl:" + field] == "undefined") {
								devObj["GTS-ClauseCtl:" + field] = mappedValue;
							}
								
							// Set fields for the Migration Log
							if (typeof devObj[this.ccTypes[ccType].fieldNames[checkFields[field]]] == "undefined"
								&& typeof devObj["|" + this.ccTypes[ccType].fieldNames[checkFields[field]]] == "undefined") {
								devObj[this.ccTypes[ccType].fieldNames[checkFields[field]]] = mappedValue; // OP/Migrated value
							}
							if (typeof devObj[this.ccTypes[ccType].fieldNames[checkFields[field]-1]] == "undefined"
								&& typeof devObj["|" + this.ccTypes[ccType].fieldNames[checkFields[field]-1]] == "undefined") {
								devObj[this.ccTypes[ccType].fieldNames[checkFields[field]-1]] = epValue; // ePolicy value
							}	
						}
					}					

					// Save the original ePolicy value for all fields
					if (epObj) {
						for (var i = 3; i <= 4; i++) {
							devObj.epolicy = devObj.epolicy || system.newEntry();
							devObj.epolicy["GTS-ClauseCtl:Col" +i] = epObj["col" + i];
						}
					}

					this.devMap[ccType].put(ref, devObj);
				}
			}			
		}
		
		this.log(RJ("Detected differences - ", 35) 
					+ RJ("RR: " + this.devMap.RR.size(), 10)
					+ " RV: " + this.devMap.RV.size());
		this.log(RJ("...Clause Changes -", 35) 
					+ RJ(" RR: " + this.clauseChanges.RR, 10)
					+ " RV: " + this.clauseChanges.RV);
		this.log(RJ(" Individual columns changed", 35) 
					+ " RV:" + this.clauseChanges.RV);
		this.log(RJ(" ... columns changed", 35) 
					+ " RR: " + this.clauseChanges.RR);
		
		return this.devMap;
	}
	
	// Create the Excel workbook
	this.buildWorkbook = function(args) {
		args = args || {};
		if (typeof args == "string") args = {name: args};
		
		var workbookName = args.name || "_NOT_SPECIFIED_";

		// Create the ExcelSheet object
		this.workbook = new ExcelObj({
			sheetFileName: workbookName,
			columnNames: ""
		});
		
		this.log("Creating Migration Log for Clause Controls...");

		if (!this.devMap || !this.devMap.RR) {
			this.devMap = this.generateDeviationMap();
		}
		
		var sheetTypes = ["RR", "RV"];

		for (var i in sheetTypes) {
			ccType = sheetTypes[i];
			
			var entry = system.newEntry();

			// Sort the CC Refs		
			var refs = this.devMap[ccType].keySet().toArray();
			java.util.Arrays.sort(refs);
		
			for (var ref in refs) {
				var devObj = this.devMap[ccType].get(ref);
				
				if (!devObj.Condition) continue;
				
				var epObj = this.epMap[ccType].get(ref) || {ref: ""};
				var opObj = this.opMap[ccType].get(ref) || {ref: ""};
				
				entry.removeAllAttributes();
				
				// Copy all properties from devObj to the entry
				for (var fieldName in devObj) {
					entry[fieldName] = String(devObj[fieldName] || "");
				}
		
				// Make sure the ePolicy and OpenPages refs are set
				entry[this.ccTypes[ccType].fieldNames[0]] = epObj.ref;
				entry[this.ccTypes[ccType].fieldNames[1]] = opObj.ref;

				this.workbook.addRow(entry, this.ccTypes[ccType].name, this.ccTypes[ccType].fieldNames);
			}
		}	
		
		return this.workbook;
	}
	
	// Return the set of changes that must be applied to OpenPages Clause Controls based on
	// the differences detected.
	this.mapOfUpdates = function() {
		if (!this.devMap || !this.devMap.RR) {
			this.devMap = this.generateDeviationMap();
		}

		this.log("Determing updates to perform to Clause Controls in OpenPages...");

		// Prepare updates object with a property for cc (Control Clauses) and proc (Procedures/Clauses)
		var updates = {
			cc: new java.util.HashMap(),
			proc: new java.util.HashMap()
		}
		
		// First ensure there is an object stored for each Clause read
		var keys = this.opClauseMap.keySet().toArray();
		for (var clauseName in keys) {
			var clauseObj = this.opClauseMap[clauseName];
			var clauseUpdate = {changes: []};
			clauseUpdate.id = clauseObj.id;
			clauseUpdate.name = clauseObj.name;
			clauseUpdate.desc = clauseObj.desc;
			updates.proc[clauseName] = clauseUpdate;
		}
		
		// Now go through the various deviations found and store these
		for (var ccType in this.ccTypes) {
			// Sort the CC Refs		
			var refs = this.devMap[ccType].keySet().toArray();
			java.util.Arrays.sort(refs);

			for (var ref in refs) {
				var updateObj = null;
				var devObj = this.devMap[ccType].get(ref);
				// We only look for Clause Control Changes
				// NOW SAVING NO CHANGE ENTRIES TOO - if (!devObj.update || !devObj.id) {
				//if (devObj.Condition.equalsIgnoreCase("No changes") || !devObj.id) {
				if (!devObj.update || !devObj.id) {
					continue;
				}
				for (var fieldName in devObj) {
					if (fieldName.startsWith("GTS-ClauseCtl")) {
						updateObj = updateObj || {};
						updateObj[fieldName] = devObj[fieldName];
					}
				}
				
				// If a deviation was detected, save the updateObj
				if (updateObj != null && devObj.id) {
					updateObj.id = devObj.id;
					updateObj.name = devObj.name;
					updateObj.ref = ref;
					updates.cc.put(ref, updateObj);
					
					// Also, update the list changes made to the Clause (Procedure in OP)
					var clauseName = devObj.name;
					var p = clauseName.indexOf("-", 5);
					clauseName = clauseName.substring(p+1);
					clauseUpdate = updates.proc[clauseName];
					clauseUpdate.changes.push(updateObj);
				}
			}
		}	
		
		return updates;
	}

	
	// Initialization code below this point
	
	this.initialize();	

	return this; // Always return *this*
}]]></parameter>
    </Script>
</MetamergeConfig>